{"version":3,"sources":["config/save.js","config/form-fields.js","config/index.js","config/vanilla.js","config/legacy-1.js","config/legacy-2.js","tab/infection/index.js","config/init.js","app.js","index.js","state.js"],"names":["SaveConfig","id","config","useAppState","setState","Form","Group","controlId","Button","variant","type","onClick","game","size","useEpidemicCountFormField","min","max","starting","useState","epidemics","setEpidemics","increment","decrement","as","Row","Label","column","xs","Col","InputGroup","className","Prepend","disabled","Control","value","Append","games","name","Config","EpidemicCount","cities","color","count","createStartingDeck","startingDeck","discard","unseen","removed","forEach","city","i","removeFromDeck","sections","section","find","Object","keys","includes","addCard","Infections","deck","setDeck","infect","reverse","removeFromTopOfDeck","epidemic","removeFromBottomOfDeck","push","console","log","Container","fluid","slice","map","cards","key","length","DeckSection","entries","Card","total","Initialize","selectedGame","setSelectedGame","GameConfig","onChange","e","target","App","navigation","setNavigation","Nav","activeKey","onSelect","k","Item","Link","eventKey","inline","window","history","back","ReactDOM","render","document","getElementById","readBrowserHash","hash","location","JSON","parse","Buffer","from","toString","context","createContext","undefined","AppStateProvider","children","state","Provider","defaultValueFn","useContext","updateHash","obj","stringify","writeBrowserHash","useEffect","listener","addEventListener","removeEventListener","actualState","updateState","newSubState","newState"],"mappings":"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","file":"static/js/main.41fdd5ec.chunk.js","sourcesContent":["import React from 'react';\nimport { useAppState } from '../state';\nimport { Button, Form } from 'react-bootstrap';\nimport { CheckCircle } from 'react-bootstrap-icons';\n\nexport const SaveConfig = ({id, config}) => {\n    const [, setState] = useAppState();\n    const save = () => setState({\n        game: id,\n        config: config,\n    });\n\n    return (\n        <Form.Group controlId='init.save-config'>\n            <Button variant=\"success\" type=\"submit\" onClick={save}>\n                <CheckCircle size={24} /> Start\n            </Button>\n        </Form.Group>\n    );\n};\n","import React, { useState } from 'react';\nimport { Button, Col, Form, InputGroup, Row } from 'react-bootstrap';\n\nexport const useEpidemicCountFormField = (min, max, starting) => {\n    const [epidemics, setEpidemics] = useState(starting);\n    const increment = () => {\n        if(epidemics < max) {\n            setEpidemics(epidemics + 1);\n        }\n    };\n    const decrement = () => {\n        if(epidemics > min) {\n            setEpidemics(epidemics - 1);\n        }\n    };\n\n    return [epidemics, () => (\n        <Form.Group as={Row} controlId='init.game-config.epidemics'>\n            <Form.Label column xs=\"8\">Epidemic Count</Form.Label>\n            <Col xs=\"4\">\n                <InputGroup size=\"md\" className=\"mb-3\">\n                    <InputGroup.Prepend>\n                        <Button variant=\"outline-secondary\" onClick={decrement} disabled={epidemics === min}>-</Button>\n                    </InputGroup.Prepend>\n                    <Form.Control type='text' disabled={true} value={epidemics} />\n                    <InputGroup.Append>\n                        <Button variant=\"outline-secondary\" onClick={increment} disabled={epidemics === max}>+</Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </Col>\n        </Form.Group>\n    )]\n};\n","import { VanillaGame } from './vanilla';\nimport { Legacy1Game } from './legacy-1';\nimport { Legacy2Game } from './legacy-2';\n\nexport const games = [\n    VanillaGame,\n    Legacy1Game,\n    Legacy2Game\n];\n","import React from 'react';\nimport { SaveConfig } from './save';\nimport { useEpidemicCountFormField } from './form-fields';\n\nconst cities = [\n    { name: 'Algiers', color: 'black', count: 1, },\n    { name: 'Atlanta', color: 'blue', count: 1, },\n    { name: 'Baghdad', color: 'black', count: 1, },\n    { name: 'Bangkok', color: 'red', count: 1, },\n    { name: 'Beijing', color: 'red', count: 1, },\n    { name: 'Bogotá', color: 'yellow', count: 1, },\n    { name: 'Buenos Aires', color: 'yellow', count: 1, },\n    { name: 'Cairo', color: 'black', count: 1, },\n    { name: 'Chennai', color: 'black', count: 1, },\n    { name: 'Chicago', color: 'blue', count: 1, },\n    { name: 'Delhi', color: 'black', count: 1, },\n    { name: 'Essen', color: 'blue', count: 1, },\n    { name: 'Ho Chi Minh City', color: 'red', count: 1, },\n    { name: 'Hong Kong', color: 'red', count: 1, },\n    { name: 'Istanbul', color: 'black', count: 1, },\n    { name: 'Jakarta', color: 'red', count: 1, },\n    { name: 'Johannesburg', color: 'yellow', count: 1, },\n    { name: 'Karachi', color: 'black', count: 1, },\n    { name: 'Khartoum', color: 'yellow', count: 1, },\n    { name: 'Kinshasa', color: 'yellow', count: 1, },\n    { name: 'Kolkata', color: 'black', count: 1, },\n    { name: 'Lagos', color: 'yellow', count: 1, },\n    { name: 'Lima', color: 'yellow', count: 1, },\n    { name: 'London', color: 'blue', count: 1, },\n    { name: 'Los Angeles', color: 'yellow', count: 1, },\n    { name: 'Madrid', color: 'blue', count: 1, },\n    { name: 'Manila', color: 'red', count: 1, },\n    { name: 'Mexico City', color: 'yellow', count: 1, },\n    { name: 'Miami', color: 'yellow', count: 1, },\n    { name: 'Milan', color: 'blue', count: 1, },\n    { name: 'Montréal', color: 'blue', count: 1, },\n    { name: 'Moscow', color: 'black', count: 1, },\n    { name: 'Mumbai', color: 'black', count: 1, },\n    { name: 'New York', color: 'blue', count: 1, },\n    { name: 'Osaka', color: 'red', count: 1, },\n    { name: 'Paris', color: 'blue', count: 1, },\n    { name: 'Riyadh', color: 'black', count: 1, },\n    { name: 'San Francisco', color: 'blue', count: 1, },\n    { name: 'Santiago', color: 'yellow', count: 1, },\n    { name: 'São Paulo', color: 'yellow', count: 1, },\n    { name: 'Seoul', color: 'red', count: 1, },\n    { name: 'Shanghai', color: 'red', count: 1, },\n    { name: 'St. Petersburg', color: 'blue', count: 1, },\n    { name: 'Sydney', color: 'red', count: 1, },\n    { name: 'Taipei', color: 'red', count: 1, },\n    { name: 'Tehran', color: 'black', count: 1, },\n    { name: 'Tokyo', color: 'red', count: 1, },\n    { name: 'Washington', color: 'blue', count: 1, },\n];\n\nconst Config = ({id}) => {\n    const [epidemics, EpidemicCount] = useEpidemicCountFormField(4, 6, 5);\n\n    return (\n        <>\n            <EpidemicCount />\n            <SaveConfig id={id} config={{\n                epidemics\n            }} />\n        </>\n    );\n};\n\nexport const VanillaGame = {\n    name: 'Vanilla',\n    Config,\n    cities\n};\n","import React from 'react';\nimport { SaveConfig } from './save';\nimport { Form } from 'react-bootstrap';\n\nconst cities = [\n    { name: 'Algiers', color: 'black', count: 1, },\n    { name: 'Atlanta', color: 'blue', count: 1, },\n    { name: 'Baghdad', color: 'black', count: 1, },\n    { name: 'Bangkok', color: 'red', count: 1, },\n    { name: 'Beijing', color: 'red', count: 1, },\n    { name: 'Bogotá', color: 'yellow', count: 1, },\n    { name: 'Buenos Aires', color: 'yellow', count: 1, },\n    { name: 'Cairo', color: 'black', count: 1, },\n    { name: 'Chennai', color: 'black', count: 1, },\n    { name: 'Chicago', color: 'blue', count: 1, },\n    { name: 'Delhi', color: 'black', count: 1, },\n    { name: 'Essen', color: 'blue', count: 1, },\n    { name: 'Ho Chi Minh City', color: 'red', count: 1, },\n    { name: 'Hong Kong', color: 'red', count: 1, },\n    { name: 'Istanbul', color: 'black', count: 1, },\n    { name: 'Jakarta', color: 'red', count: 1, },\n    { name: 'Johannesburg', color: 'yellow', count: 1, },\n    { name: 'Karachi', color: 'black', count: 1, },\n    { name: 'Khartoum', color: 'yellow', count: 1, },\n    { name: 'Kinshasa', color: 'yellow', count: 1, },\n    { name: 'Kolkata', color: 'black', count: 1, },\n    { name: 'Lagos', color: 'yellow', count: 1, },\n    { name: 'Lima', color: 'yellow', count: 1, },\n    { name: 'London', color: 'blue', count: 1, },\n    { name: 'Los Angeles', color: 'yellow', count: 1, },\n    { name: 'Madrid', color: 'blue', count: 1, },\n    { name: 'Manila', color: 'red', count: 1, },\n    { name: 'Mexico City', color: 'yellow', count: 1, },\n    { name: 'Miami', color: 'yellow', count: 1, },\n    { name: 'Milan', color: 'blue', count: 1, },\n    { name: 'Montréal', color: 'blue', count: 1, },\n    { name: 'Moscow', color: 'black', count: 1, },\n    { name: 'Mumbai', color: 'black', count: 1, },\n    { name: 'New York', color: 'blue', count: 1, },\n    { name: 'Osaka', color: 'red', count: 1, },\n    { name: 'Paris', color: 'blue', count: 1, },\n    { name: 'Riyadh', color: 'black', count: 1, },\n    { name: 'San Francisco', color: 'blue', count: 1, },\n    { name: 'Santiago', color: 'yellow', count: 1, },\n    { name: 'São Paulo', color: 'yellow', count: 1, },\n    { name: 'Seoul', color: 'red', count: 1, },\n    { name: 'Shanghai', color: 'red', count: 1, },\n    { name: 'St. Petersburg', color: 'blue', count: 1, },\n    { name: 'Sydney', color: 'red', count: 1, },\n    { name: 'Taipei', color: 'red', count: 1, },\n    { name: 'Tehran', color: 'black', count: 1, },\n    { name: 'Tokyo', color: 'red', count: 1, },\n    { name: 'Washington', color: 'blue', count: 1, },\n];\n\nconst Config = ({id}) => (\n    <>\n        <Form.Group controlId='init.game-config'>\n            <span className='text-muted'>No configuration options.</span>\n        </Form.Group>\n        <SaveConfig id={id} config={{}} />\n    </>\n);\n\nexport const Legacy1Game = {\n    name: 'Legacy Season 1',\n    Config,\n    cities\n};\n","import React from 'react';\nimport { SaveConfig } from './save';\nimport { useEpidemicCountFormField } from './form-fields';\n\nconst cities = [\n];\n\nconst Config = ({id}) => {\n    const [epidemics, EpidemicCount] = useEpidemicCountFormField(1, 20, 5);\n\n    return (\n        <>\n            <EpidemicCount />\n            <SaveConfig id={id} config={{\n                epidemics\n            }} />\n        </>\n    );\n};\n\nexport const Legacy2Game = {\n    name: 'Legacy Season 2',\n    Config,\n    cities\n};\n","import React from 'react';\nimport { Button, Container } from 'react-bootstrap';\nimport { useAppState } from '../../state';\nimport { AlertTriangle, CapslockFill } from 'react-bootstrap-icons';\nimport './index.css';\nimport { games } from '../../config';\n\nconst createStartingDeck = (cities) => {\n    const startingDeck = {\n        discard: {},\n        unseen: {},\n        epidemics: [],\n        removed: {},\n    };\n\n    cities.forEach((city, id) => {\n        for(let i = 0; i < city.count; i++) {\n            startingDeck.unseen[id] = city.count;\n        }\n    });\n\n    return startingDeck;\n};\n\nconst removeFromDeck = (id, ...sections) => {\n    const section = sections.find(section => Object.keys(section).includes(id));\n    section[id]--;\n    if(section[id] <= 0) {\n        delete section[id];\n    }\n};\n\nconst removeFromTopOfDeck = (id, deck) => removeFromDeck(id, ...([deck.unseen, ...deck.epidemics].reverse()));\nconst removeFromBottomOfDeck = (id, deck) => removeFromDeck(id, deck.unseen, ...deck.epidemics);\nconst addCard = (id, section) => {\n    if(!section[id]) {\n        section[id] = 0;\n    }\n\n    section[id]++\n};\n\nexport const Infections = () => {\n    const [game] = useAppState('game');\n    const cities = games[game].cities;\n    const [deck, setDeck] = useAppState('infectionDeck', () => createStartingDeck(cities));\n\n    if(!deck) {\n        setDeck(createStartingDeck(cities));\n        return (<></>);\n    }\n\n    const infect = (id) => {\n        removeFromTopOfDeck(id, deck);\n        addCard(id, deck.discard);\n        setDeck(deck);\n    };\n\n    const epidemic = (id) => {\n        removeFromBottomOfDeck(id, deck);\n        addCard(id, deck.discard);\n        deck.epidemics.push(deck.discard);\n        deck.discard = {};\n        setDeck(deck);\n    };\n\n    const remove = (id, section) => {\n        removeFromDeck(id, section);\n        addCard(id, deck.removed);\n        setDeck(deck);\n    };\n\n    console.log(deck);\n\n    return (\n        <Container fluid className='infection-content'>\n            {\n                deck.epidemics.slice(0).reverse().map((cards, i) => (\n                    <DeckSection key={i} name={`Epidemic #${deck.epidemics.length - i}`} cities={cities} cards={cards} infect={infect} epidemic={epidemic} />\n                ))\n            }\n            <DeckSection name='Main Deck' cities={cities} cards={deck.unseen} infect={infect} epidemic={epidemic} />\n            <DeckSection name='Discard' cities={cities} cards={deck.discard} />\n            <DeckSection name='Removed from Play' cities={cities} cards={deck.removed} />\n        </Container>\n    );\n};\n\nconst DeckSection = ({ name, cities, cards, infect, epidemic }) => {\n    if(!cards || Object.entries(cards).length <= 0) {\n        return (<></>);\n    }\n\n    return (\n        <div className='infection-deck-section'>\n            <h3 className='infection-deck-section-title'>{name}</h3>\n            {Object.entries(cards).map(([id, count]) => (\n                <Card\n                    key={id}\n                    id={id}\n                    city={cities[id]}\n                    count={count}\n                    infect={infect}\n                    epidemic={epidemic}\n                />\n            ))}\n        </div>\n    )\n};\n\nconst Card = ({ id, city, count, infect, epidemic }) => {\n    const { color, name, count: total } = city;\n\n    return (\n        <div className={`d-flex infection-deck-card infection-group-${color}`}>\n            <span className='mr-auto p-2'>{name}</span>\n            <span className='p-2'><span>{count}</span><span className='text-muted'> / </span><span className='text-muted'>{total}</span></span>\n            { epidemic && <span className='p-2'><Button variant='success' size='xs' onClick={() => epidemic(id)}><AlertTriangle size={18} /></Button></span> }\n            { infect && <span className='p-2'><Button size='xs' onClick={() => infect(id)}><CapslockFill size={18} /></Button></span> }\n        </div>\n    );\n};\n\n","import React, { useState } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { games } from './index';\n\nexport const Initialize = () => {\n    const [selectedGame, setSelectedGame] = useState(0);\n    const GameConfig = games[selectedGame].Config;\n\n    return (\n        <Container fluid className='main-content'>\n            <h3>Start a New Game</h3>\n            <Form>\n                <Form.Group controlId='init.game-name'>\n                    <Form.Label>Game Version</Form.Label>\n                    <Form.Control as='select' value={selectedGame} onChange={(e) => setSelectedGame(e.target.value)}>\n                        {\n                            games.map((game, i) => (<option key={i} value={i}>{game.name}</option>))\n                        }\n                    </Form.Control>\n                </Form.Group>\n                <GameConfig id={selectedGame} />\n            </Form>\n        </Container>\n    );\n};\n","import React, { useState } from 'react';\nimport { Infections } from './tab/infection';\nimport { Button, Form, Nav } from 'react-bootstrap';\nimport { useAppState } from './state';\nimport './app.css';\nimport { Initialize } from './config/init';\nimport { Trash, SkipBackward } from 'react-bootstrap-icons';\n\n\nexport const App = () => {\n    const [navigation, setNavigation] = useState('/infection');\n    const [game] = useAppState('game');\n    const [, setState] = useAppState();\n\n    if(!game && game !== 0) {\n        return (<Initialize />)\n    }\n\n    return (\n        <>\n            <Nav variant=\"tabs\" activeKey={navigation} onSelect={k => setNavigation(k)}>\n                <Nav.Item className='mr-auto'>\n                    <Nav.Link eventKey='/infection'>Infection Deck</Nav.Link>\n                </Nav.Item>\n                {/*<Nav.Item className='mr-auto'>*/}\n                {/*    <Nav.Link eventKey='/player-cards'>Player Cards</Nav.Link>*/}\n                {/*</Nav.Item>*/}\n                <Form inline className='nav-buttons'>\n                    <Button variant=\"outline-primary\" onClick={() => window.history.back()}><SkipBackward size={24} /></Button>\n                    <Button variant=\"outline-danger\" onClick={() => setState({})}><Trash size={24} /></Button>\n                </Form>\n            </Nav>\n            {navigation === '/infection' && <Infections />}\n            {navigation === '/player-cards' && <div>todo</div>}\n        </>\n    );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { App } from './app';\nimport { AppStateProvider } from './state';\n\nconst Main = () => (\n    <AppStateProvider>\n        <App />\n    </AppStateProvider>\n);\n\nReactDOM.render(<Main />, document.getElementById('root'));\n","import React, { useEffect, createContext, useContext, useState } from 'react';\n\nconst readBrowserHash = () => {\n    const hash = window.location.hash;\n    if(!hash) {\n        return {}\n    }\n\n    return JSON.parse(Buffer.from(hash, 'base64').toString());\n};\nconst writeBrowserHash = (obj) => window.location.hash = Buffer.from(JSON.stringify(obj)).toString(\"base64\");\n\nconst context = createContext(undefined);\n\nexport const AppStateProvider = ({children}) => {\n    const [state, setState] = useState(readBrowserHash());\n    console.log(state);\n    const { Provider } = context;\n    return (\n        <Provider value={[state, setState]}>{children}</Provider>\n    );\n};\n\nexport const useAppState = (key, defaultValueFn) => {\n    const [state, setState] = useContext(context);\n    const updateHash = (obj) => {\n        writeBrowserHash(obj);\n    };\n\n    useEffect(() => {\n        const listener = () => setState(readBrowserHash());\n\n        window.addEventListener('hashchange', listener);\n        return () => window.removeEventListener('hashchange', listener);\n    });\n\n    const actualState = !key ? state : state[key];\n    const updateState = !key ? (newState) => updateHash(newState) : (newSubState) => {\n        const newState = {\n            ...state,\n            [key]: newSubState\n        };\n        updateHash(newState)\n    };\n\n    return [actualState === undefined && defaultValueFn ? defaultValueFn() : actualState, updateState]\n};\n"],"sourceRoot":""}