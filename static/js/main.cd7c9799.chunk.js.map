{"version":3,"sources":["state.js","config/save.js","config/form-fields.js","config/index.js","config/vanilla.js","config/legacy-1.js","config/legacy-2.js","infection/card.js","infection/deck-utils.js","infection/footer.js","infection/index.js","config/init.js","app.js","index.js"],"names":["readBrowserHash","hash","window","location","JSON","parse","Buffer","from","toString","context","createContext","undefined","AppStateProvider","children","useState","state","setState","console","log","Provider","value","useAppState","key","defaultValueFn","useContext","updateHash","obj","stringify","writeBrowserHash","useEffect","listener","addEventListener","removeEventListener","actualState","updateState","newSubState","newState","SaveConfig","id","config","Form","Group","controlId","Button","variant","type","onClick","game","size","useEpidemicCountFormField","min","max","starting","epidemics","setEpidemics","increment","decrement","as","Row","Label","column","xs","Col","InputGroup","className","Prepend","disabled","Control","Append","games","name","Config","EpidemicCount","cities","color","count","colors","blue","red","yellow","black","useStyles","createUseStyles","card","fontWeight","fontSize","padding","borderBottom","height","lineHeight","backgroundColor","props","extra","paddingLeft","paddingRight","extraModalButton","width","marginTop","Card","infect","epidemic","remove","unremove","showEpidemic","showDraw","showModal","setShowModal","handleCloseModal","city","total","styles","closeWithAction","fn","modalButtons","push","hasModalButtons","length","nameSection","countSection","Modal","show","onHide","Header","closeButton","Title","Body","map","button","i","createMissingCardSection","seen","section","forEach","countInSection","addToSection","explodeSection","deckSection","Object","entries","first","explodeCard","sort","a","b","localeCompare","removeFromSection","removeFromDeck","sections","find","addCard","footer","boxSizing","borderTop","position","bottom","buttons","flexGrow","textAlign","marginRight","Footer","history","back","forward","content","sectionTitle","margin","Infections","discard","removed","deck","setDeck","explodedDeck","slice","reverse","missingSection","unseen","explodeDeck","removeFromTopOfDeck","removeFromBottomOfDeck","Container","fluid","cards","flatMap","e","DeckSection","Initialize","selectedGame","setSelectedGame","GameConfig","onChange","target","App","ReactDOM","render","document","getElementById"],"mappings":"qPAEMA,EAAkB,WACpB,IAAMC,EAAOC,OAAOC,SAASF,KAC7B,OAAIA,EAIGG,KAAKC,MAAMC,EAAOC,KAAKN,EAAM,UAAUO,YAHnC,IAOTC,EAAUC,6BAAcC,GAEjBC,EAAmB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EAClBC,mBAASd,KADS,mBACrCe,EADqC,KAC9BC,EAD8B,KAE5CC,QAAQC,IAAIH,GAFgC,IAGpCI,EAAaV,EAAbU,SACR,OACI,kBAACA,EAAD,CAAUC,MAAO,CAACL,EAAOC,IAAYH,IAIhCQ,EAAc,SAACC,EAAKC,GAAoB,IAAD,EACtBC,qBAAWf,GADW,mBACzCM,EADyC,KAClCC,EADkC,KAE1CS,EAAa,SAACC,IAfC,SAACA,GAAQxB,OAAOC,SAASF,KAAOK,EAAOC,KAAKH,KAAKuB,UAAUD,IAAMlB,SAAS,UAgB3FoB,CAAiBF,IAGrBG,qBAAU,WACN,IAAMC,EAAW,kBAAMd,EAAShB,MAGhC,OADAE,OAAO6B,iBAAiB,aAAcD,GAC/B,kBAAM5B,OAAO8B,oBAAoB,aAAcF,OAG1D,IAAMG,EAAeX,EAAcP,EAAMO,GAAdP,EACrBmB,EAAeZ,EAA2C,SAACa,GAC7D,IAAMC,EAAQ,eACPrB,EADO,eAETO,EAAMa,IAEXV,EAAWW,IALY,SAACA,GAAD,OAAcX,EAAWW,IAQpD,MAAO,MAAiBzB,IAAhBsB,GAA6BV,EAAiBA,IAAmBU,EAAaC,M,0NCxC7EG,EAAa,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,OAAY,EACnBlB,cAAZL,EAD+B,oBAOxC,OACI,kBAACwB,EAAA,EAAKC,MAAN,CAAYC,UAAU,oBAClB,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,SAASC,QAPnC,kBAAM9B,EAAS,CACxB+B,KAAMT,EACNC,OAAQA,MAMA,kBAAC,IAAD,CAAaS,KAAM,KADvB,Y,wBCXCC,EAA4B,SAACC,EAAKC,EAAKC,GAAc,IAAD,EAC3BtC,mBAASsC,GADkB,mBACtDC,EADsD,KAC3CC,EAD2C,KAEvDC,EAAY,WACXF,EAAYF,GACXG,EAAaD,EAAY,IAG3BG,EAAY,WACXH,EAAYH,GACXI,EAAaD,EAAY,IAIjC,MAAO,CAACA,EAAW,kBACf,kBAACb,EAAA,EAAKC,MAAN,CAAYgB,GAAIC,IAAKhB,UAAU,8BAC3B,kBAACF,EAAA,EAAKmB,MAAN,CAAYC,QAAM,EAACC,GAAG,KAAtB,kBACA,kBAACC,EAAA,EAAD,CAAKD,GAAG,KACJ,kBAACE,EAAA,EAAD,CAAYf,KAAK,KAAKgB,UAAU,QAC5B,kBAACD,EAAA,EAAWE,QAAZ,KACI,kBAACtB,EAAA,EAAD,CAAQC,QAAQ,oBAAoBE,QAASU,EAAWU,SAAUb,IAAcH,GAAhF,MAEJ,kBAACV,EAAA,EAAK2B,QAAN,CAActB,KAAK,OAAOqB,UAAU,EAAM9C,MAAOiC,IACjD,kBAACU,EAAA,EAAWK,OAAZ,KACI,kBAACzB,EAAA,EAAD,CAAQC,QAAQ,oBAAoBE,QAASS,EAAWW,SAAUb,IAAcF,GAAhF,YCtBXkB,EAAQ,CCgEM,CACvBC,KAAM,UACNC,OAfW,SAAC,GAAU,IAATjC,EAAQ,EAARA,GAAQ,EACcW,EAA0B,EAAG,EAAG,GAD9C,mBACdI,EADc,KACHmB,EADG,KAGrB,OACI,oCACI,kBAACA,EAAD,MACA,kBAAC,EAAD,CAAYlC,GAAIA,EAAIC,OAAQ,CACxBc,iBASZoB,OAnEW,CACX,CAAEH,KAAM,UAAWI,MAAO,QAASC,MAAO,GAC1C,CAAEL,KAAM,UAAWI,MAAO,OAAQC,MAAO,GACzC,CAAEL,KAAM,UAAWI,MAAO,QAASC,MAAO,GAC1C,CAAEL,KAAM,UAAWI,MAAO,MAAOC,MAAO,GACxC,CAAEL,KAAM,UAAWI,MAAO,MAAOC,MAAO,GACxC,CAAEL,KAAM,YAAUI,MAAO,SAAUC,MAAO,GAC1C,CAAEL,KAAM,eAAgBI,MAAO,SAAUC,MAAO,GAChD,CAAEL,KAAM,QAASI,MAAO,QAASC,MAAO,GACxC,CAAEL,KAAM,UAAWI,MAAO,QAASC,MAAO,GAC1C,CAAEL,KAAM,UAAWI,MAAO,OAAQC,MAAO,GACzC,CAAEL,KAAM,QAASI,MAAO,QAASC,MAAO,GACxC,CAAEL,KAAM,QAASI,MAAO,OAAQC,MAAO,GACvC,CAAEL,KAAM,mBAAoBI,MAAO,MAAOC,MAAO,GACjD,CAAEL,KAAM,YAAaI,MAAO,MAAOC,MAAO,GAC1C,CAAEL,KAAM,WAAYI,MAAO,QAASC,MAAO,GAC3C,CAAEL,KAAM,UAAWI,MAAO,MAAOC,MAAO,GACxC,CAAEL,KAAM,eAAgBI,MAAO,SAAUC,MAAO,GAChD,CAAEL,KAAM,UAAWI,MAAO,QAASC,MAAO,GAC1C,CAAEL,KAAM,WAAYI,MAAO,SAAUC,MAAO,GAC5C,CAAEL,KAAM,WAAYI,MAAO,SAAUC,MAAO,GAC5C,CAAEL,KAAM,UAAWI,MAAO,QAASC,MAAO,GAC1C,CAAEL,KAAM,QAASI,MAAO,SAAUC,MAAO,GACzC,CAAEL,KAAM,OAAQI,MAAO,SAAUC,MAAO,GACxC,CAAEL,KAAM,SAAUI,MAAO,OAAQC,MAAO,GACxC,CAAEL,KAAM,cAAeI,MAAO,SAAUC,MAAO,GAC/C,CAAEL,KAAM,SAAUI,MAAO,OAAQC,MAAO,GACxC,CAAEL,KAAM,SAAUI,MAAO,MAAOC,MAAO,GACvC,CAAEL,KAAM,cAAeI,MAAO,SAAUC,MAAO,GAC/C,CAAEL,KAAM,QAASI,MAAO,SAAUC,MAAO,GACzC,CAAEL,KAAM,QAASI,MAAO,OAAQC,MAAO,GACvC,CAAEL,KAAM,cAAYI,MAAO,OAAQC,MAAO,GAC1C,CAAEL,KAAM,SAAUI,MAAO,QAASC,MAAO,GACzC,CAAEL,KAAM,SAAUI,MAAO,QAASC,MAAO,GACzC,CAAEL,KAAM,WAAYI,MAAO,OAAQC,MAAO,GAC1C,CAAEL,KAAM,QAASI,MAAO,MAAOC,MAAO,GACtC,CAAEL,KAAM,QAASI,MAAO,OAAQC,MAAO,GACvC,CAAEL,KAAM,SAAUI,MAAO,QAASC,MAAO,GACzC,CAAEL,KAAM,gBAAiBI,MAAO,OAAQC,MAAO,GAC/C,CAAEL,KAAM,WAAYI,MAAO,SAAUC,MAAO,GAC5C,CAAEL,KAAM,eAAaI,MAAO,SAAUC,MAAO,GAC7C,CAAEL,KAAM,QAASI,MAAO,MAAOC,MAAO,GACtC,CAAEL,KAAM,WAAYI,MAAO,MAAOC,MAAO,GACzC,CAAEL,KAAM,iBAAkBI,MAAO,OAAQC,MAAO,GAChD,CAAEL,KAAM,SAAUI,MAAO,MAAOC,MAAO,GACvC,CAAEL,KAAM,SAAUI,MAAO,MAAOC,MAAO,GACvC,CAAEL,KAAM,SAAUI,MAAO,QAASC,MAAO,GACzC,CAAEL,KAAM,QAASI,MAAO,MAAOC,MAAO,GACtC,CAAEL,KAAM,aAAcI,MAAO,OAAQC,MAAO,KCYrB,CACvBL,KAAM,kBACNC,OAXW,SAAC,GAAD,IAAEjC,EAAF,EAAEA,GAAF,OACX,oCACI,kBAACE,EAAA,EAAKC,MAAN,CAAYC,UAAU,oBAClB,0BAAMsB,UAAU,cAAhB,8BAEJ,kBAAC,EAAD,CAAY1B,GAAIA,EAAIC,OAAQ,OAOhCkC,OA/DW,CACX,CAAEH,KAAM,UAAWI,MAAO,QAASC,MAAO,GAC1C,CAAEL,KAAM,UAAWI,MAAO,OAAQC,MAAO,GACzC,CAAEL,KAAM,UAAWI,MAAO,QAASC,MAAO,GAC1C,CAAEL,KAAM,UAAWI,MAAO,MAAOC,MAAO,GACxC,CAAEL,KAAM,UAAWI,MAAO,MAAOC,MAAO,GACxC,CAAEL,KAAM,YAAUI,MAAO,SAAUC,MAAO,GAC1C,CAAEL,KAAM,eAAgBI,MAAO,SAAUC,MAAO,GAChD,CAAEL,KAAM,QAASI,MAAO,QAASC,MAAO,GACxC,CAAEL,KAAM,UAAWI,MAAO,QAASC,MAAO,GAC1C,CAAEL,KAAM,UAAWI,MAAO,OAAQC,MAAO,GACzC,CAAEL,KAAM,QAASI,MAAO,QAASC,MAAO,GACxC,CAAEL,KAAM,QAASI,MAAO,OAAQC,MAAO,GACvC,CAAEL,KAAM,mBAAoBI,MAAO,MAAOC,MAAO,GACjD,CAAEL,KAAM,YAAaI,MAAO,MAAOC,MAAO,GAC1C,CAAEL,KAAM,WAAYI,MAAO,QAASC,MAAO,GAC3C,CAAEL,KAAM,UAAWI,MAAO,MAAOC,MAAO,GACxC,CAAEL,KAAM,eAAgBI,MAAO,SAAUC,MAAO,GAChD,CAAEL,KAAM,UAAWI,MAAO,QAASC,MAAO,GAC1C,CAAEL,KAAM,WAAYI,MAAO,SAAUC,MAAO,GAC5C,CAAEL,KAAM,WAAYI,MAAO,SAAUC,MAAO,GAC5C,CAAEL,KAAM,UAAWI,MAAO,QAASC,MAAO,GAC1C,CAAEL,KAAM,QAASI,MAAO,SAAUC,MAAO,GACzC,CAAEL,KAAM,OAAQI,MAAO,SAAUC,MAAO,GACxC,CAAEL,KAAM,SAAUI,MAAO,OAAQC,MAAO,GACxC,CAAEL,KAAM,cAAeI,MAAO,SAAUC,MAAO,GAC/C,CAAEL,KAAM,SAAUI,MAAO,OAAQC,MAAO,GACxC,CAAEL,KAAM,SAAUI,MAAO,MAAOC,MAAO,GACvC,CAAEL,KAAM,cAAeI,MAAO,SAAUC,MAAO,GAC/C,CAAEL,KAAM,QAASI,MAAO,SAAUC,MAAO,GACzC,CAAEL,KAAM,QAASI,MAAO,OAAQC,MAAO,GACvC,CAAEL,KAAM,cAAYI,MAAO,OAAQC,MAAO,GAC1C,CAAEL,KAAM,SAAUI,MAAO,QAASC,MAAO,GACzC,CAAEL,KAAM,SAAUI,MAAO,QAASC,MAAO,GACzC,CAAEL,KAAM,WAAYI,MAAO,OAAQC,MAAO,GAC1C,CAAEL,KAAM,QAASI,MAAO,MAAOC,MAAO,GACtC,CAAEL,KAAM,QAASI,MAAO,OAAQC,MAAO,GACvC,CAAEL,KAAM,SAAUI,MAAO,QAASC,MAAO,GACzC,CAAEL,KAAM,gBAAiBI,MAAO,OAAQC,MAAO,GAC/C,CAAEL,KAAM,WAAYI,MAAO,SAAUC,MAAO,GAC5C,CAAEL,KAAM,eAAaI,MAAO,SAAUC,MAAO,GAC7C,CAAEL,KAAM,QAASI,MAAO,MAAOC,MAAO,GACtC,CAAEL,KAAM,WAAYI,MAAO,MAAOC,MAAO,GACzC,CAAEL,KAAM,iBAAkBI,MAAO,OAAQC,MAAO,GAChD,CAAEL,KAAM,SAAUI,MAAO,MAAOC,MAAO,GACvC,CAAEL,KAAM,SAAUI,MAAO,MAAOC,MAAO,GACvC,CAAEL,KAAM,SAAUI,MAAO,QAASC,MAAO,GACzC,CAAEL,KAAM,QAASI,MAAO,MAAOC,MAAO,GACtC,CAAEL,KAAM,aAAcI,MAAO,OAAQC,MAAO,KChCrB,CACvBL,KAAM,kBACNC,OAfW,SAAC,GAAU,IAATjC,EAAQ,EAARA,GAAQ,EACcW,EAA0B,EAAG,GAAI,GAD/C,mBACdI,EADc,KACHmB,EADG,KAGrB,OACI,oCACI,kBAACA,EAAD,MACA,kBAAC,EAAD,CAAYlC,GAAIA,EAAIC,OAAQ,CACxBc,iBASZoB,OAnBW,K,gBCCTG,EAAS,CACXC,KAAM,0BACNC,IAAK,yBACLC,OAAQ,0BACRC,MAAO,4BAGLC,EAAYC,YAAgB,CAC9BC,KAAM,CACFC,WAAY,IACZC,SAAU,OACVC,QAAS,UACTC,aAAc,oBACd,WAAY,CACRC,OAAQ,OACRC,WAAY,QAGhBC,gBAAiB,SAAAC,GAAK,OAAIf,EAAOe,EAAMjB,SAE3CkB,MAAO,CACHC,YAAa,eACb,WAAY,CACRA,YAAa,eACbC,aAAc,iBAGtBC,iBAAkB,CACdC,MAAO,OACPC,UAAW,UAINC,EAAO,SAAC,GAA0E,IAAxEf,EAAuE,EAAvEA,KAAMgB,EAAiE,EAAjEA,OAAQC,EAAyD,EAAzDA,SAAUC,EAA+C,EAA/CA,OAAQC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SAAe,EACxD1F,oBAAS,GAD+C,mBACnF2F,EADmF,KACxEC,EADwE,KAEpFC,EAAmB,kBAAMD,GAAa,IAGpCE,EAAoBzB,EAApByB,KAAMtE,EAAc6C,EAAd7C,GAAIqC,EAAUQ,EAAVR,MACVD,EAA8BkC,EAA9BlC,MAAOJ,EAAuBsC,EAAvBtC,KAAauC,EAAUD,EAAjBjC,MAEfmC,EAAS7B,EAAU,CAACP,UAEpBqC,EAAkB,SAACC,GAAD,OAAQ,WAC5BL,IACAK,EAAG1E,KAGD2E,EAAe,GAClBd,IAAWK,GACVS,EAAaC,KACT,kBAACvE,EAAA,EAAD,CAAQqB,UAAW8C,EAAOf,iBAAkB/C,KAAK,KAAKJ,QAAQ,UAAUE,QAASiE,EAAgBZ,IAC7F,kBAAC,IAAD,CAAcnD,KAAM,KADxB,gBAKLoD,IAAaG,GACZU,EAAaC,KACT,kBAACvE,EAAA,EAAD,CAAQqB,UAAW8C,EAAOf,iBAAkB/C,KAAK,KAAKJ,QAAQ,UAAUE,QAASiE,EAAgBX,IAC7F,kBAAC,IAAD,CAAepD,KAAM,KADzB,oBAKLqD,GACCY,EAAaC,KACT,kBAACvE,EAAA,EAAD,CAAQqB,UAAW8C,EAAOf,iBAAkB/C,KAAK,KAAKJ,QAAQ,SAASE,QAASiE,EAAgBV,IAC5F,kBAAC,IAAD,CAAWrD,KAAM,KADrB,sBAKLsD,GACCW,EAAaC,KACT,kBAACvE,EAAA,EAAD,CAAQqB,UAAW8C,EAAOf,iBAAkB/C,KAAK,KAAKJ,QAAQ,UAAUE,QAASiE,EAAgBT,IAC7F,kBAAC,IAAD,CAAgBtD,KAAM,KAD1B,oBAMR,IAAMmE,EAA0C,IAAxBF,EAAaG,OAC/BC,EAAe,0BAAMrD,UAAU,eAAeM,GAC9CgD,EAAgB,0BAAMtD,UAAU,OAClC,8BAAOW,GAAa,0BAAMX,UAAU,cAAhB,OAAuC,0BAAMA,UAAU,cAAc6C,IAG7F,OACI,yBAAK7C,UAAS,iBAAY8C,EAAO3B,OAC5BkC,EACAC,EACAd,GAAYL,GAAU,0BAAMnC,UAAU,OACnC,kBAACrB,EAAA,EAAD,CAAQK,KAAK,KAAKF,QAAS,kBAAMqD,EAAO7D,KAAK,kBAAC,IAAD,CAAcU,KAAM,OAEpEuD,GAAgBH,GAAY,0BAAMpC,UAAU,OACzC,kBAACrB,EAAA,EAAD,CAAQC,QAAQ,UAAUI,KAAK,KAAKF,QAAS,kBAAMsD,EAAS9D,KAAK,kBAAC,IAAD,CAAeU,KAAM,OAEzFmE,GAAmB,0BAAMnD,UAAS,cAAS8C,EAAOlB,QAC/C,kBAACjD,EAAA,EAAD,CAAQC,QAAQ,oBAAoBI,KAAK,KAAKF,QA3DlC,kBAAM4D,GAAa,KA4D3B,kBAAC,IAAD,CAAmB1D,KAAM,OAGhCmE,GAAmB,kBAACI,EAAA,EAAD,CAAOC,KAAML,GAAmBV,EAAWgB,OAAQd,GACnE,kBAACY,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACrB,kBAACJ,EAAA,EAAMK,MAAP,4BAEJ,kBAACL,EAAA,EAAMM,KAAP,KACI,yBAAK7D,UAAS,iBAAY8C,EAAO3B,OAC5BkC,EACAC,GAEJL,EAAaa,KAAI,SAACC,EAAQC,GAAT,OAAgB,yBAAK1G,IAAK0G,GAAID,U,QCtG9DE,EAA2B,SAACxD,EAAQyD,GACtC,IAAMC,EAAU,GAQhB,OAPA1D,EAAO2D,SAAQ,SAACxB,EAAMtE,GAClB,IAAMqC,EAAQ0D,EAAe/F,EAAI4F,GAC9BtB,EAAKjC,MAAQA,GACZ2D,EAAahG,EAAI6F,EAASvB,EAAKjC,MAAQA,MAIxCwD,GAGLI,EAAiB,SAAC9D,EAAQyD,EAAMM,GAClC,IAAML,EAAU,GAWhB,OAVAM,OAAOC,QAAQF,GAAaJ,SAAQ,YAAkB,IAAD,mBAAf9F,EAAe,KAAXqC,EAAW,KAC3CgE,IAAQT,GAAoC,IAA7BG,EAAe/F,EAAI4F,GACxCC,EAAQjB,KAAK0B,EAAYtG,EAAIqC,EAAOgE,EAAOlE,EAAOnC,KAC/C4F,GACCI,EAAahG,EAAI4F,MAIzBC,EAAQU,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAElC,KAAKtC,KAAK0E,cAAcD,EAAEnC,KAAKtC,SAEjD6D,GAGLS,EAAc,SAACtG,EAAIqC,EAAOgE,EAAO/B,GAAnB,MAA6B,CAC7CA,OACAtE,KACAqC,QACAgE,UAGEN,EAAiB,SAAC/F,EAAI6F,GACxB,OAAOA,EAAQ7F,IAAO,GAGb2G,EAAoB,SAAC3G,EAAI6F,GAClC,IAAMxD,EAAQ0D,EAAe/F,EAAI6F,GACjC,OAAGxD,EAAQ,IACJA,EAAQ,EACPwD,EAAQ7F,YAED6F,EAAQ7F,IAGZ,IAKTgG,EAAe,SAAChG,EAAI6F,GAAwB,IAAfxD,EAAc,uDAAN,EACpC0D,EAAe/F,EAAI6F,IAAY,IAC9BA,EAAQ7F,GAAM,GAGlB6F,EAAQ7F,GAAM6F,EAAQ7F,GAAMqC,GAG1BuE,EAAiB,SAAC5G,GAAqB,IAAD,uBAAb6G,EAAa,iCAAbA,EAAa,kBACxCA,EAASC,MAAK,SAAAjB,GAAO,OAAIc,EAAkB3G,EAAI6F,OAMtCkB,EAAU,SAAC/G,EAAI6F,GACpBA,EAAQ7F,KACR6F,EAAQ7F,GAAM,GAGlB6F,EAAQ7F,MC5EN2C,EAAYC,YAAgB,CAC9BoE,OAAQ,CACJ5D,gBAAiB,UACjBF,OAJoB,OAKpBC,WALoB,OAMpBJ,SAAU,OACVkE,UAAW,aACXC,UAAW,oBACXC,SAAU,QACVC,OAAQ,EACR1D,MAAO,QAEX2D,QAAS,CACLrE,QAAS,SACTsE,SAAU,EACVC,UAAW,SACX,WAAY,CACRC,YAAa,OACb,eAAgB,CACZA,YAAa,OAMhBC,EAAS,WAAO,IAAD,EACH1I,cAAZL,EADe,oBAElB8F,EAAS7B,IAEf,OACI,yBAAKjB,UAAS,iBAAY8C,EAAOwC,SAC7B,0BAAMtF,UAAW8C,EAAO6C,SACpB,kBAAChH,EAAA,EAAD,CAAQC,QAAQ,kBAAkBE,QAAS,kBAAM5C,OAAO8J,QAAQC,SAAQ,kBAAC,IAAD,CAAcjH,KAAM,MAC5F,kBAACL,EAAA,EAAD,CAAQC,QAAQ,iBAAiBE,QAAS,kBAAM9B,EAAS,MAAK,kBAAC,IAAD,CAAOgC,KAAM,MAC3E,kBAACL,EAAA,EAAD,CAAQC,QAAQ,kBAAkBE,QAAS,kBAAM5C,OAAO8J,QAAQE,YAAW,kBAAC,IAAD,CAAalH,KAAM,SChCxGiC,EAAYC,YAAgB,CAC9BiF,QAAS,CACL7E,QAAQ,OAAD,ODLa,OCKb,OAEX8E,aAAc,CACV9E,QAAS,YACT+E,OAAQ,EACR9E,aAAc,uBAIT+E,EAAa,WACtB,IAAMxD,EAAS7B,IADa,EAEb5D,YAAY,QAApB0B,EAFqB,oBAGtB0B,EAASJ,EAAMtB,GAAM0B,OAHC,EAIJpD,YAAY,iBAAiB,iBAAO,CACxDgC,UAAW,GACXkH,QAAS,GACTC,QAAS,OAPe,mBAIrBC,EAJqB,KAIfC,EAJe,OFpBL,SAACD,EAAMhG,GAC9B,IAAMyD,EAAO,GACPyC,EAAe,GACrBA,EAAatH,UAAYoH,EAAKpH,UAAUuH,MAAM,GAAGC,UAAU/C,KAAI,SAAAK,GAAO,OAAII,EAAe9D,EAAQyD,EAAMC,MACvGwC,EAAaJ,QAAUhC,EAAe9D,EAAQyD,EAAMuC,EAAKF,SACzDI,EAAaH,QAAUjC,EAAe9D,EAAQyD,EAAMuC,EAAKD,SACzD,IAAMM,EAAiB7C,EAAyBxD,EAAQyD,GAExD,OADAyC,EAAaI,OAASxC,EAAe9D,EAAQ,KAAMqG,GAC5C,CAAEH,eAAcG,kBEsBkBE,CAAYP,EAAMhG,GAAnDkG,EAVoB,EAUpBA,aAAcG,EAVM,EAUNA,eAEhB3E,EAAS,SAAC7D,IF2Ce,SAACA,EAAIyI,EAAQ1H,GAAc6F,EAAc,WAAd,GAAe5G,GAAf,mBAAuB,CAACyI,GAAD,mBAAY1H,IAAWwH,aE1CpGI,CAAoB3I,EAAIwI,EAAgBL,EAAKpH,WAC7CgG,EAAQ/G,EAAImI,EAAKF,SACjBG,EAAQD,IAGNrE,EAAW,SAAC9D,IFsCgB,SAACA,EAAIyI,EAAQ1H,GAAc6F,EAAc,WAAd,GAAe5G,EAAIyI,GAAnB,mBAA8B1H,KErCvF6H,CAAuB5I,EAAIwI,EAAgBL,EAAKpH,WAChDgG,EAAQ/G,EAAImI,EAAKF,SACjBE,EAAKpH,UAAU6D,KAAKuD,EAAKF,SACzBE,EAAKF,QAAU,GACfG,EAAQD,IAGNpE,EAAS,SAAC8B,GAAD,OAAa,SAAC7F,GACzB2G,EAAkB3G,EAAI6F,GACtBkB,EAAQ/G,EAAImI,EAAKD,SACjBE,EAAQD,KAQZ,OACI,oCACI,kBAACU,EAAA,EAAD,CAAWC,OAAK,EAACpH,UAAW8C,EAAOqD,SAE3BQ,EAAatH,UAAUyE,KAAI,SAACuD,EAAOrD,GAAR,OACvB,kBAAC,EAAD,CACI1G,IAAK0G,EACL1D,KAAI,oBAAeqG,EAAatH,UAAU+D,OAASY,GACnDqD,MAAOA,EACPlF,OAAQA,EACRC,SAAUA,EACVC,OAAQA,EAAOoE,EAAKpH,UAAWoH,EAAKpH,UAAU+D,OAAS,EAAKY,IAC5DzB,cAAc,EACdC,SAAwE,IAA9DmE,EAAatH,UAAUuH,MAAM,EAAG5C,GAAGsD,SAAQ,SAAAC,GAAC,OAAIA,KAAGnE,YAIzE,kBAAC,EAAD,CACI9C,KAAK,YACLG,OAAQA,EACR4G,MAAOV,EAAaI,OACpB5E,OAAQA,EACRC,SAAUA,EACVC,OAAQA,EAAOyE,GACfvE,cAAc,EACdC,SAA4D,IAAlDmE,EAAatH,UAAUiI,SAAQ,SAAAC,GAAC,OAAIA,KAAGnE,SAErD,kBAAC,EAAD,CACI9C,KAAK,UACLG,OAAQA,EACR4G,MAAOV,EAAaJ,QACpBlE,OAAQA,EAAOoE,EAAKF,WAExB,kBAAC,EAAD,CACIjG,KAAK,oBACLG,OAAQA,EACR4G,MAAOV,EAAaH,QACpBlE,SA1CC,SAAChE,GACd2G,EAAkB3G,EAAImI,EAAKD,SAC3BE,EAAQD,OA2CJ,kBAAC,EAAD,QAKNe,EAAc,SAAC,GAAiF,IAA/ElH,EAA8E,EAA9EA,KAAM+G,EAAwE,EAAxEA,MAAOlF,EAAiE,EAAjEA,OAAQC,EAAyD,EAAzDA,SAAUC,EAA+C,EAA/CA,OAAQC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SAC5EM,EAAS7B,IACf,OAAIoG,GAASA,EAAMjE,QAAU,EACjB,qCAIR,6BACI,wBAAIpD,UAAW8C,EAAOsD,cAAe9F,GACpC+G,EAAMvD,KAAI,SAAC3C,EAAM6C,GAAP,OACP,kBAAC,EAAD,CACI1G,IAAK0G,EACL7C,KAAMA,EACNgB,OAAQA,EACRC,SAAUA,EACVC,OAAQA,EACRC,SAAUA,EACVC,aAAcA,EACdC,SAAUA,SCpHjBiF,EAAa,WAAO,IAAD,EACY3K,mBAAS,GADrB,mBACrB4K,EADqB,KACPC,EADO,KAEtBC,EAAavH,EAAMqH,GAAcnH,OAEvC,OACI,kBAAC4G,EAAA,EAAD,CAAWC,OAAK,EAACpH,UAAU,gBACvB,gDACA,kBAACxB,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBAClB,kBAACF,EAAA,EAAKmB,MAAN,qBACA,kBAACnB,EAAA,EAAK2B,QAAN,CAAcV,GAAG,SAASrC,MAAOsK,EAAcG,SAAU,SAACN,GAAD,OAAOI,EAAgBJ,EAAEO,OAAO1K,SAEjFiD,EAAMyD,KAAI,SAAC/E,EAAMiF,GAAP,OAAc,4BAAQ1G,IAAK0G,EAAG5G,MAAO4G,GAAIjF,EAAKuB,WAIpE,kBAACsH,EAAD,CAAYtJ,GAAIoJ,OCfnBK,EAAM,WAAO,IAAD,EACN1K,YAAY,QAApB0B,EADc,oBAGrB,OAAIA,GAAiB,IAATA,EAIJ,kBAAC,EAAD,MAHI,kBAAC,EAAD,OCIhBiJ,IAASC,OAAO,mBANH,kBACT,kBAAC,IAAD,KACI,kBAAC,EAAD,SAIQ,MAAUC,SAASC,eAAe,W","file":"static/js/main.cd7c9799.chunk.js","sourcesContent":["import React, { useEffect, createContext, useContext, useState } from 'react';\n\nconst readBrowserHash = () => {\n    const hash = window.location.hash;\n    if(!hash) {\n        return {}\n    }\n\n    return JSON.parse(Buffer.from(hash, 'base64').toString());\n};\nconst writeBrowserHash = (obj) => window.location.hash = Buffer.from(JSON.stringify(obj)).toString(\"base64\");\n\nconst context = createContext(undefined);\n\nexport const AppStateProvider = ({children}) => {\n    const [state, setState] = useState(readBrowserHash());\n    console.log(state);\n    const { Provider } = context;\n    return (\n        <Provider value={[state, setState]}>{children}</Provider>\n    );\n};\n\nexport const useAppState = (key, defaultValueFn) => {\n    const [state, setState] = useContext(context);\n    const updateHash = (obj) => {\n        writeBrowserHash(obj);\n    };\n\n    useEffect(() => {\n        const listener = () => setState(readBrowserHash());\n\n        window.addEventListener('hashchange', listener);\n        return () => window.removeEventListener('hashchange', listener);\n    });\n\n    const actualState = !key ? state : state[key];\n    const updateState = !key ? (newState) => updateHash(newState) : (newSubState) => {\n        const newState = {\n            ...state,\n            [key]: newSubState\n        };\n        updateHash(newState)\n    };\n\n    return [actualState === undefined && defaultValueFn ? defaultValueFn() : actualState, updateState]\n};\n","import React from 'react';\nimport { useAppState } from '../state';\nimport { Button, Form } from 'react-bootstrap';\nimport { CheckCircle } from 'react-bootstrap-icons';\n\nexport const SaveConfig = ({id, config}) => {\n    const [, setState] = useAppState();\n    const save = () => setState({\n        game: id,\n        config: config,\n    });\n\n    return (\n        <Form.Group controlId='init.save-config'>\n            <Button variant=\"success\" type=\"submit\" onClick={save}>\n                <CheckCircle size={24} /> Start\n            </Button>\n        </Form.Group>\n    );\n};\n","import React, { useState } from 'react';\nimport { Button, Col, Form, InputGroup, Row } from 'react-bootstrap';\n\nexport const useEpidemicCountFormField = (min, max, starting) => {\n    const [epidemics, setEpidemics] = useState(starting);\n    const increment = () => {\n        if(epidemics < max) {\n            setEpidemics(epidemics + 1);\n        }\n    };\n    const decrement = () => {\n        if(epidemics > min) {\n            setEpidemics(epidemics - 1);\n        }\n    };\n\n    return [epidemics, () => (\n        <Form.Group as={Row} controlId='init.game-config.epidemics'>\n            <Form.Label column xs=\"8\">Epidemic Count</Form.Label>\n            <Col xs=\"4\">\n                <InputGroup size=\"md\" className=\"mb-3\">\n                    <InputGroup.Prepend>\n                        <Button variant=\"outline-secondary\" onClick={decrement} disabled={epidemics === min}>-</Button>\n                    </InputGroup.Prepend>\n                    <Form.Control type='text' disabled={true} value={epidemics} />\n                    <InputGroup.Append>\n                        <Button variant=\"outline-secondary\" onClick={increment} disabled={epidemics === max}>+</Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </Col>\n        </Form.Group>\n    )]\n};\n","import { VanillaGame } from './vanilla';\nimport { Legacy1Game } from './legacy-1';\nimport { Legacy2Game } from './legacy-2';\n\nexport const games = [\n    VanillaGame,\n    Legacy1Game,\n    Legacy2Game\n];\n","import React from 'react';\nimport { SaveConfig } from './save';\nimport { useEpidemicCountFormField } from './form-fields';\n\nconst cities = [\n    { name: 'Algiers', color: 'black', count: 1, },\n    { name: 'Atlanta', color: 'blue', count: 1, },\n    { name: 'Baghdad', color: 'black', count: 1, },\n    { name: 'Bangkok', color: 'red', count: 1, },\n    { name: 'Beijing', color: 'red', count: 1, },\n    { name: 'Bogotá', color: 'yellow', count: 1, },\n    { name: 'Buenos Aires', color: 'yellow', count: 1, },\n    { name: 'Cairo', color: 'black', count: 1, },\n    { name: 'Chennai', color: 'black', count: 1, },\n    { name: 'Chicago', color: 'blue', count: 1, },\n    { name: 'Delhi', color: 'black', count: 1, },\n    { name: 'Essen', color: 'blue', count: 1, },\n    { name: 'Ho Chi Minh City', color: 'red', count: 1, },\n    { name: 'Hong Kong', color: 'red', count: 1, },\n    { name: 'Istanbul', color: 'black', count: 1, },\n    { name: 'Jakarta', color: 'red', count: 1, },\n    { name: 'Johannesburg', color: 'yellow', count: 1, },\n    { name: 'Karachi', color: 'black', count: 1, },\n    { name: 'Khartoum', color: 'yellow', count: 1, },\n    { name: 'Kinshasa', color: 'yellow', count: 1, },\n    { name: 'Kolkata', color: 'black', count: 1, },\n    { name: 'Lagos', color: 'yellow', count: 1, },\n    { name: 'Lima', color: 'yellow', count: 1, },\n    { name: 'London', color: 'blue', count: 1, },\n    { name: 'Los Angeles', color: 'yellow', count: 1, },\n    { name: 'Madrid', color: 'blue', count: 1, },\n    { name: 'Manila', color: 'red', count: 1, },\n    { name: 'Mexico City', color: 'yellow', count: 1, },\n    { name: 'Miami', color: 'yellow', count: 1, },\n    { name: 'Milan', color: 'blue', count: 1, },\n    { name: 'Montréal', color: 'blue', count: 1, },\n    { name: 'Moscow', color: 'black', count: 1, },\n    { name: 'Mumbai', color: 'black', count: 1, },\n    { name: 'New York', color: 'blue', count: 1, },\n    { name: 'Osaka', color: 'red', count: 1, },\n    { name: 'Paris', color: 'blue', count: 1, },\n    { name: 'Riyadh', color: 'black', count: 1, },\n    { name: 'San Francisco', color: 'blue', count: 1, },\n    { name: 'Santiago', color: 'yellow', count: 1, },\n    { name: 'São Paulo', color: 'yellow', count: 1, },\n    { name: 'Seoul', color: 'red', count: 1, },\n    { name: 'Shanghai', color: 'red', count: 1, },\n    { name: 'St. Petersburg', color: 'blue', count: 1, },\n    { name: 'Sydney', color: 'red', count: 1, },\n    { name: 'Taipei', color: 'red', count: 1, },\n    { name: 'Tehran', color: 'black', count: 1, },\n    { name: 'Tokyo', color: 'red', count: 1, },\n    { name: 'Washington', color: 'blue', count: 1, },\n];\n\nconst Config = ({id}) => {\n    const [epidemics, EpidemicCount] = useEpidemicCountFormField(4, 6, 5);\n\n    return (\n        <>\n            <EpidemicCount />\n            <SaveConfig id={id} config={{\n                epidemics\n            }} />\n        </>\n    );\n};\n\nexport const VanillaGame = {\n    name: 'Vanilla',\n    Config,\n    cities\n};\n","import React from 'react';\nimport { SaveConfig } from './save';\nimport { Form } from 'react-bootstrap';\n\nconst cities = [\n    { name: 'Algiers', color: 'black', count: 1, },\n    { name: 'Atlanta', color: 'blue', count: 1, },\n    { name: 'Baghdad', color: 'black', count: 1, },\n    { name: 'Bangkok', color: 'red', count: 1, },\n    { name: 'Beijing', color: 'red', count: 1, },\n    { name: 'Bogotá', color: 'yellow', count: 1, },\n    { name: 'Buenos Aires', color: 'yellow', count: 1, },\n    { name: 'Cairo', color: 'black', count: 1, },\n    { name: 'Chennai', color: 'black', count: 1, },\n    { name: 'Chicago', color: 'blue', count: 1, },\n    { name: 'Delhi', color: 'black', count: 1, },\n    { name: 'Essen', color: 'blue', count: 1, },\n    { name: 'Ho Chi Minh City', color: 'red', count: 1, },\n    { name: 'Hong Kong', color: 'red', count: 1, },\n    { name: 'Istanbul', color: 'black', count: 1, },\n    { name: 'Jakarta', color: 'red', count: 1, },\n    { name: 'Johannesburg', color: 'yellow', count: 1, },\n    { name: 'Karachi', color: 'black', count: 1, },\n    { name: 'Khartoum', color: 'yellow', count: 1, },\n    { name: 'Kinshasa', color: 'yellow', count: 1, },\n    { name: 'Kolkata', color: 'black', count: 1, },\n    { name: 'Lagos', color: 'yellow', count: 1, },\n    { name: 'Lima', color: 'yellow', count: 1, },\n    { name: 'London', color: 'blue', count: 1, },\n    { name: 'Los Angeles', color: 'yellow', count: 1, },\n    { name: 'Madrid', color: 'blue', count: 1, },\n    { name: 'Manila', color: 'red', count: 1, },\n    { name: 'Mexico City', color: 'yellow', count: 1, },\n    { name: 'Miami', color: 'yellow', count: 1, },\n    { name: 'Milan', color: 'blue', count: 1, },\n    { name: 'Montréal', color: 'blue', count: 1, },\n    { name: 'Moscow', color: 'black', count: 1, },\n    { name: 'Mumbai', color: 'black', count: 1, },\n    { name: 'New York', color: 'blue', count: 1, },\n    { name: 'Osaka', color: 'red', count: 1, },\n    { name: 'Paris', color: 'blue', count: 1, },\n    { name: 'Riyadh', color: 'black', count: 1, },\n    { name: 'San Francisco', color: 'blue', count: 1, },\n    { name: 'Santiago', color: 'yellow', count: 1, },\n    { name: 'São Paulo', color: 'yellow', count: 1, },\n    { name: 'Seoul', color: 'red', count: 1, },\n    { name: 'Shanghai', color: 'red', count: 1, },\n    { name: 'St. Petersburg', color: 'blue', count: 1, },\n    { name: 'Sydney', color: 'red', count: 1, },\n    { name: 'Taipei', color: 'red', count: 1, },\n    { name: 'Tehran', color: 'black', count: 1, },\n    { name: 'Tokyo', color: 'red', count: 1, },\n    { name: 'Washington', color: 'blue', count: 1, },\n];\n\nconst Config = ({id}) => (\n    <>\n        <Form.Group controlId='init.game-config'>\n            <span className='text-muted'>No configuration options.</span>\n        </Form.Group>\n        <SaveConfig id={id} config={{}} />\n    </>\n);\n\nexport const Legacy1Game = {\n    name: 'Legacy Season 1',\n    Config,\n    cities\n};\n","import React from 'react';\nimport { SaveConfig } from './save';\nimport { useEpidemicCountFormField } from './form-fields';\n\nconst cities = [\n];\n\nconst Config = ({id}) => {\n    const [epidemics, EpidemicCount] = useEpidemicCountFormField(1, 20, 5);\n\n    return (\n        <>\n            <EpidemicCount />\n            <SaveConfig id={id} config={{\n                epidemics\n            }} />\n        </>\n    );\n};\n\nexport const Legacy2Game = {\n    name: 'Legacy Season 2',\n    Config,\n    cities\n};\n","import React, { useState } from 'react';\nimport { Button, Modal } from 'react-bootstrap';\nimport { AlertTriangle, ArrowClockwise, CapslockFill, ThreeDotsVertical, TrashFill } from 'react-bootstrap-icons';\nimport { createUseStyles } from 'react-jss';\n\nconst colors = {\n    blue: 'rgba(52, 152, 219, 0.8)',\n    red: 'rgba(231, 76, 60, 0.7)',\n    yellow: 'rgba(241, 224, 19, 0.6)',\n    black: 'rgba(127, 140, 141, 0.8)'\n};\n\nconst useStyles = createUseStyles({\n    card: {\n        fontWeight: 400,\n        fontSize: '18px',\n        padding: '5px 7px',\n        borderBottom: '1px solid #6b6b6b',\n        '& > span': {\n            height: '50px',\n            lineHeight: '34px'\n        },\n\n        backgroundColor: props => colors[props.color],\n    },\n    extra: {\n        paddingLeft: '0 !important',\n        '& button': {\n            paddingLeft: '0 !important',\n            paddingRight: '0 !important',\n        }\n    },\n    extraModalButton: {\n        width: '100%',\n        marginTop: '10px'\n    }\n});\n\nexport const Card = ({ card, infect, epidemic, remove, unremove, showEpidemic, showDraw }) => {\n    const [showModal, setShowModal] = useState(false);\n    const handleCloseModal = () => setShowModal(false);\n    const handleShowModal = () => setShowModal(true);\n\n    const { city, id, count } = card;\n    const { color, name, count: total } = city;\n\n    const styles = useStyles({color});\n\n    const closeWithAction = (fn) => () => {\n        handleCloseModal();\n        fn(id);\n    };\n\n    const modalButtons = [];\n    if(infect && !showDraw) {\n        modalButtons.push((\n            <Button className={styles.extraModalButton} size='lg' variant='primary' onClick={closeWithAction(infect)}>\n                <CapslockFill size={26}/> Force Draw\n            </Button>\n        ))\n    }\n    if(epidemic && !showEpidemic) {\n        modalButtons.push((\n            <Button className={styles.extraModalButton} size='lg' variant='success' onClick={closeWithAction(epidemic)}>\n                <AlertTriangle size={26}/> Force Epidemic\n            </Button>\n        ))\n    }\n    if(remove) {\n        modalButtons.push((\n            <Button className={styles.extraModalButton} size='lg' variant='danger' onClick={closeWithAction(remove)}>\n                <TrashFill size={26}/> Remove from Play\n            </Button>\n        ))\n    }\n    if(unremove) {\n        modalButtons.push((\n            <Button className={styles.extraModalButton} size='lg' variant='primary' onClick={closeWithAction(unremove)}>\n                <ArrowClockwise size={26}/> Return to Play\n            </Button>\n        ))\n    }\n\n    const hasModalButtons = modalButtons.length !== 0;\n    const nameSection = (<span className='mr-auto p-2'>{name}</span>);\n    const countSection = (<span className='p-2'>\n        <span>{count}</span><span className='text-muted'> / </span><span className='text-muted'>{total}</span>\n    </span>);\n\n    return (\n        <div className={`d-flex ${styles.card}`}>\n            {nameSection}\n            {countSection}\n            {showDraw && infect && <span className='p-2'>\n                <Button size='xs' onClick={() => infect(id)}><CapslockFill size={18}/></Button>\n            </span>}\n            {showEpidemic && epidemic && <span className='p-2'>\n                <Button variant='success' size='xs' onClick={() => epidemic(id)}><AlertTriangle size={18}/></Button>\n            </span>}\n            {hasModalButtons && <span className={`p-2 ${styles.extra}`}>\n                <Button variant='secondary-outline' size='xs' onClick={handleShowModal}>\n                    <ThreeDotsVertical size={18}/>\n                </Button>\n            </span>}\n            {hasModalButtons && <Modal show={hasModalButtons && showModal} onHide={handleCloseModal}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Additional Actions</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className={`d-flex ${styles.card}`}>\n                        {nameSection}\n                        {countSection}\n                    </div>\n                    {modalButtons.map((button, i) => (<div key={i}>{button}</div>))}\n                </Modal.Body>\n            </Modal>}\n        </div>\n    );\n};\n","export const explodeDeck = (deck, cities) => {\n    const seen = {};\n    const explodedDeck = {};\n    explodedDeck.epidemics = deck.epidemics.slice(0).reverse().map(section => explodeSection(cities, seen, section));\n    explodedDeck.discard = explodeSection(cities, seen, deck.discard);\n    explodedDeck.removed = explodeSection(cities, seen, deck.removed);\n    const missingSection = createMissingCardSection(cities, seen);\n    explodedDeck.unseen = explodeSection(cities, null, missingSection);\n    return { explodedDeck, missingSection };\n};\n\nconst createMissingCardSection = (cities, seen) => {\n    const section = {};\n    cities.forEach((city, id) => {\n        const count = countInSection(id, seen);\n        if(city.count > count) {\n            addToSection(id, section, city.count - count);\n        }\n    });\n\n    return section;\n};\n\nconst explodeSection = (cities, seen, deckSection) => {\n    const section = [];\n    Object.entries(deckSection).forEach(([id, count]) => {\n        const first = seen ? countInSection(id, seen) === 0 : false;\n        section.push(explodeCard(id, count, first, cities[id]));\n        if(seen) {\n            addToSection(id, seen);\n        }\n    });\n\n    section.sort((a, b) => a.city.name.localeCompare(b.city.name));\n\n    return section;\n};\n\nconst explodeCard = (id, count, first, city) => ({\n    city,\n    id,\n    count,\n    first\n});\n\nconst countInSection = (id, section) => {\n    return section[id] || 0;\n};\n\nexport const removeFromSection = (id, section) => {\n    const count = countInSection(id, section);\n    if(count > 0) {\n        if(count > 1) {\n            section[id]--;\n        } else {\n            delete section[id];\n        }\n\n        return true\n    }\n    return false\n};\n\nconst addToSection = (id, section, count = 1) => {\n    if(countInSection(id, section) <= 0) {\n        section[id] = 0;\n    }\n\n    section[id] = section[id] + count;\n};\n\nconst removeFromDeck = (id, ...sections) => {\n    sections.find(section => removeFromSection(id, section));\n};\n\nexport const removeFromTopOfDeck = (id, unseen, epidemics) => removeFromDeck(id, ...([unseen, ...epidemics].reverse()));\nexport const removeFromBottomOfDeck = (id, unseen, epidemics) => removeFromDeck(id, unseen, ...epidemics);\n\nexport const addCard = (id, section) => {\n    if(!section[id]) {\n        section[id] = 0;\n    }\n\n    section[id]++\n};\n","import { createUseStyles } from 'react-jss';\nimport { useAppState } from '../state';\nimport { SkipBackward, SkipForward, Trash } from 'react-bootstrap-icons';\nimport { Button } from 'react-bootstrap';\nimport React from 'react';\n\nexport const footerHeight = '60px';\nconst useStyles = createUseStyles({\n    footer: {\n        backgroundColor: '#f3f3f3',\n        height: footerHeight,\n        lineHeight: footerHeight,\n        fontSize: '20px',\n        boxSizing: 'border-box',\n        borderTop: '1px solid #5f5f5f',\n        position: 'fixed',\n        bottom: 0,\n        width: '100%',\n    },\n    buttons: {\n        padding: '0 15px',\n        flexGrow: 1,\n        textAlign: 'center',\n        '& button': {\n            marginRight: '15px',\n            '&:last-child': {\n                marginRight: 0\n            }\n        }\n    }\n});\n\nexport const Footer = () => {\n    const [, setState] = useAppState();\n    const styles = useStyles();\n\n    return (\n        <div className={`d-flex ${styles.footer}`}>\n            <span className={styles.buttons}>\n                <Button variant=\"outline-primary\" onClick={() => window.history.back()}><SkipBackward size={24} /></Button>\n                <Button variant=\"outline-danger\" onClick={() => setState({})}><Trash size={24} /></Button>\n                <Button variant=\"outline-primary\" onClick={() => window.history.forward()}><SkipForward size={24} /></Button>\n            </span>\n        </div>\n    )\n};\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { useAppState } from '../state';\nimport { games } from '../config';\nimport { Card } from './card';\nimport { addCard, explodeDeck, removeFromBottomOfDeck, removeFromSection, removeFromTopOfDeck } from './deck-utils';\nimport { createUseStyles } from 'react-jss';\nimport { Footer, footerHeight } from './footer';\n\nconst useStyles = createUseStyles({\n    content: {\n        padding: `0 0 ${footerHeight} 0`\n    },\n    sectionTitle: {\n        padding: '25px 15px',\n        margin: 0,\n        borderBottom: '1px solid #5f5f5f'\n    }\n});\n\nexport const Infections = () => {\n    const styles = useStyles();\n    const [game] = useAppState('game');\n    const cities = games[game].cities;\n    const [deck, setDeck] = useAppState('infectionDeck', () => ({\n        epidemics: [],\n        discard: {},\n        removed: {},\n    }));\n\n    const { explodedDeck, missingSection } = explodeDeck(deck, cities);\n\n    const infect = (id) => {\n        removeFromTopOfDeck(id, missingSection, deck.epidemics);\n        addCard(id, deck.discard);\n        setDeck(deck);\n    };\n\n    const epidemic = (id) => {\n        removeFromBottomOfDeck(id, missingSection, deck.epidemics);\n        addCard(id, deck.discard);\n        deck.epidemics.push(deck.discard);\n        deck.discard = {};\n        setDeck(deck);\n    };\n\n    const remove = (section) => (id) => {\n        removeFromSection(id, section);\n        addCard(id, deck.removed);\n        setDeck(deck);\n    };\n\n    const unremove = (id) => {\n        removeFromSection(id, deck.removed);\n        setDeck(deck);\n    };\n\n    return (\n        <>\n            <Container fluid className={styles.content}>\n                {\n                    explodedDeck.epidemics.map((cards, i) => (\n                        <DeckSection\n                            key={i}\n                            name={`Epidemic #${explodedDeck.epidemics.length - i}`}\n                            cards={cards}\n                            infect={infect}\n                            epidemic={epidemic}\n                            remove={remove(deck.epidemics[(deck.epidemics.length - 1) - i])}\n                            showEpidemic={false}\n                            showDraw={explodedDeck.epidemics.slice(0, i).flatMap(e => e).length === 0}\n                        />\n                    ))\n                }\n                <DeckSection\n                    name='Main Deck'\n                    cities={cities}\n                    cards={explodedDeck.unseen}\n                    infect={infect}\n                    epidemic={epidemic}\n                    remove={remove(missingSection)}\n                    showEpidemic={true}\n                    showDraw={explodedDeck.epidemics.flatMap(e => e).length === 0}\n                />\n                <DeckSection\n                    name='Discard'\n                    cities={cities}\n                    cards={explodedDeck.discard}\n                    remove={remove(deck.discard)}\n                />\n                <DeckSection\n                    name='Removed from Play'\n                    cities={cities}\n                    cards={explodedDeck.removed}\n                    unremove={unremove}\n                />\n            </Container>\n            <Footer />\n        </>\n    );\n};\n\nconst DeckSection = ({ name, cards, infect, epidemic, remove, unremove, showEpidemic, showDraw }) => {\n    const styles = useStyles();\n    if(!cards || cards.length <= 0) {\n        return (<></>);\n    }\n\n    return (\n        <div>\n            <h3 className={styles.sectionTitle}>{name}</h3>\n            {cards.map((card, i) => (\n                <Card\n                    key={i}\n                    card={card}\n                    infect={infect}\n                    epidemic={epidemic}\n                    remove={remove}\n                    unremove={unremove}\n                    showEpidemic={showEpidemic}\n                    showDraw={showDraw}\n                />\n            ))}\n        </div>\n    )\n};\n\n","import React, { useState } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { games } from './index';\n\nexport const Initialize = () => {\n    const [selectedGame, setSelectedGame] = useState(0);\n    const GameConfig = games[selectedGame].Config;\n\n    return (\n        <Container fluid className='main-content'>\n            <h3>Start a New Game</h3>\n            <Form>\n                <Form.Group controlId='init.game-name'>\n                    <Form.Label>Game Version</Form.Label>\n                    <Form.Control as='select' value={selectedGame} onChange={(e) => setSelectedGame(e.target.value)}>\n                        {\n                            games.map((game, i) => (<option key={i} value={i}>{game.name}</option>))\n                        }\n                    </Form.Control>\n                </Form.Group>\n                <GameConfig id={selectedGame} />\n            </Form>\n        </Container>\n    );\n};\n","import React from 'react';\nimport { Infections } from './infection';\nimport { useAppState } from './state';\nimport { Initialize } from './config/init';\n\nexport const App = () => {\n    const [game] = useAppState('game');\n\n    if(!game && game !== 0) {\n        return (<Initialize />)\n    }\n\n    return (<Infections />);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { App } from './app';\nimport { AppStateProvider } from './state';\n\nconst Main = () => (\n    <AppStateProvider>\n        <App />\n    </AppStateProvider>\n);\n\nReactDOM.render(<Main />, document.getElementById('root'));\n"],"sourceRoot":""}