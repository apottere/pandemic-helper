{"version":3,"sources":["state.js","config/save.js","config/form-fields.js","config/vanilla.js","config/legacy-1.js","config/legacy-2.js","config/index.js","infection/card.js","infection/deck-utils.js","infection/footer.js","infection/index.js","config/init.js","app.js","index.js"],"names":["readBrowserHash","hash","window","location","JSON","parse","Buffer","from","toString","context","createContext","undefined","AppStateProvider","children","useState","state","setState","console","log","Provider","value","useAppState","key","defaultValueFn","useContext","updateHash","obj","stringify","writeBrowserHash","useEffect","listener","addEventListener","removeEventListener","actualState","updateState","newSubState","newState","SaveConfig","id","config","Form","Group","controlId","Button","variant","type","onClick","game","size","useEpidemicCountFormField","min","max","starting","useIncrementingCount","epidemics","increment","decrement","canIncrement","canDecrement","as","Row","Label","column","xs","Col","InputGroup","Prepend","disabled","Control","Append","usePlayerCountFormField","players","count","setCount","VanillaGame","name","Config","PlayerCount","EpidemicCount","cities","color","Legacy1Game","className","startingCities","allRecons","games","gameId","recons","setRecons","possibleRecons","isReconEnabled","potentialCities","Object","keys","flatMap","reconId","map","city","sort","a","b","localeCompare","isCityConnected","includes","recon","i","Check","label","checked","onChange","_","length","filter","cityId","concat","toggleCity","enabledCities","entries","connected","colors","blue","red","yellow","black","useStyles","createUseStyles","card","fontWeight","fontSize","padding","borderBottom","height","lineHeight","backgroundColor","props","extra","paddingLeft","paddingRight","extraModalButton","width","marginTop","Card","infect","epidemic","remove","unremove","showEpidemic","showDraw","showModal","setShowModal","handleCloseModal","total","styles","closeWithAction","fn","modalButtons","push","hasModalButtons","nameSection","countSection","Modal","show","onHide","Header","closeButton","Title","Body","button","createMissingCardSection","seen","section","forEach","countInSection","addToSection","explodeSection","deckSection","first","explodeCard","removeFromSection","removeFromDeck","sections","find","addCard","footer","boxSizing","borderTop","position","bottom","buttons","flexGrow","textAlign","marginRight","Footer","history","back","forward","content","sectionTitle","margin","Infections","discard","removed","deck","setDeck","explodedDeck","slice","reverse","missingSection","unseen","explodeDeck","removeFromTopOfDeck","removeFromBottomOfDeck","Container","fluid","cards","e","DeckSection","Initialize","selectedGame","setSelectedGame","GameConfig","target","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3dd6a8e9.chunk.js","sourcesContent":["import React, { useEffect, createContext, useContext, useState } from 'react';\n\nconst readBrowserHash = () => {\n    const hash = window.location.hash;\n    if(!hash) {\n        return {}\n    }\n\n    return JSON.parse(Buffer.from(hash, 'base64').toString());\n};\nconst writeBrowserHash = (obj) => window.location.hash = Buffer.from(JSON.stringify(obj)).toString(\"base64\");\n\nconst context = createContext(undefined);\n\nexport const AppStateProvider = ({children}) => {\n    const [state, setState] = useState(readBrowserHash());\n    console.log(state);\n    const { Provider } = context;\n    return (\n        <Provider value={[state, setState]}>{children}</Provider>\n    );\n};\n\nexport const useAppState = (key, defaultValueFn) => {\n    const [state, setState] = useContext(context);\n    const updateHash = (obj) => {\n        writeBrowserHash(obj);\n    };\n\n    useEffect(() => {\n        const listener = () => setState(readBrowserHash());\n\n        window.addEventListener('hashchange', listener);\n        return () => window.removeEventListener('hashchange', listener);\n    });\n\n    const actualState = !key ? state : state[key];\n    const updateState = !key ? (newState) => updateHash(newState) : (newSubState) => {\n        const newState = {\n            ...state,\n            [key]: newSubState\n        };\n        updateHash(newState)\n    };\n\n    return [actualState === undefined && defaultValueFn ? defaultValueFn() : actualState, updateState]\n};\n","import React from 'react';\nimport { useAppState } from '../state';\nimport { Button, Form } from 'react-bootstrap';\nimport { CheckCircle } from 'react-bootstrap-icons';\n\nexport const SaveConfig = ({id, config}) => {\n    const [, setState] = useAppState();\n    const save = () => setState({\n        game: id,\n        config: config,\n    });\n\n    return (\n        <Form.Group controlId='init.save-config'>\n            <Button variant=\"success\" type=\"submit\" onClick={save}>\n                <CheckCircle size={24} /> Start\n            </Button>\n        </Form.Group>\n    );\n};\n","import React, { useState } from 'react';\nimport { Button, Col, Form, InputGroup, Row } from 'react-bootstrap';\n\nexport const useEpidemicCountFormField = (min, max, starting) => {\n    const [epidemics, increment, decrement, canIncrement, canDecrement] = useIncrementingCount(min, max, starting);\n\n    return [epidemics, () => (\n        <Form.Group as={Row} controlId='init.game-config.epidemics'>\n            <Form.Label column xs='8'>Epidemic Count</Form.Label>\n            <Col xs='4'>\n                <InputGroup size='md'>\n                    <InputGroup.Prepend>\n                        <Button variant='outline-secondary' onClick={decrement} disabled={!canDecrement}>-</Button>\n                    </InputGroup.Prepend>\n                    <Form.Control type='text' disabled={true} value={epidemics} />\n                    <InputGroup.Append>\n                        <Button variant='outline-secondary' onClick={increment} disabled={!canIncrement}>+</Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </Col>\n        </Form.Group>\n    )]\n};\n\nexport const usePlayerCountFormField = () => {\n    const [players, increment, decrement, canIncrement, canDecrement] = useIncrementingCount(2, 4, 4);\n\n    return [players, () => (\n        <Form.Group as={Row} controlId='init.game-config.players'>\n            <Form.Label column xs='8'>Player Count</Form.Label>\n            <Col xs='4'>\n                <InputGroup size='md'>\n                    <InputGroup.Prepend>\n                        <Button variant='outline-secondary' onClick={decrement} disabled={!canDecrement}>-</Button>\n                    </InputGroup.Prepend>\n                    <Form.Control type='text' disabled={true} value={players} />\n                    <InputGroup.Append>\n                        <Button variant='outline-secondary' onClick={increment} disabled={!canIncrement}>+</Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </Col>\n        </Form.Group>\n    )]\n};\n\nconst useIncrementingCount = (min, max, starting) => {\n    const [count, setCount] = useState(starting);\n    const canIncrement = count < max;\n    const canDecrement = count > min;\n\n    const increment = () => {\n        if(canIncrement) {\n            setCount(count + 1);\n        }\n    };\n    const decrement = () => {\n        if(canDecrement) {\n            setCount(count - 1);\n        }\n    };\n\n    return [count, increment, decrement, canIncrement, canDecrement];\n};\n","import React from 'react';\nimport { SaveConfig } from './save';\nimport { useEpidemicCountFormField, usePlayerCountFormField } from './form-fields';\n\nconst cities = () => [\n    { name: 'Algiers', color: 'black', count: 1, },\n    { name: 'Atlanta', color: 'blue', count: 1, },\n    { name: 'Baghdad', color: 'black', count: 1, },\n    { name: 'Bangkok', color: 'red', count: 1, },\n    { name: 'Beijing', color: 'red', count: 1, },\n    { name: 'Bogotá', color: 'yellow', count: 1, },\n    { name: 'Buenos Aires', color: 'yellow', count: 1, },\n    { name: 'Cairo', color: 'black', count: 1, },\n    { name: 'Chennai', color: 'black', count: 1, },\n    { name: 'Chicago', color: 'blue', count: 1, },\n    { name: 'Delhi', color: 'black', count: 1, },\n    { name: 'Essen', color: 'blue', count: 1, },\n    { name: 'Ho Chi Minh City', color: 'red', count: 1, },\n    { name: 'Hong Kong', color: 'red', count: 1, },\n    { name: 'Istanbul', color: 'black', count: 1, },\n    { name: 'Jakarta', color: 'red', count: 1, },\n    { name: 'Johannesburg', color: 'yellow', count: 1, },\n    { name: 'Karachi', color: 'black', count: 1, },\n    { name: 'Khartoum', color: 'yellow', count: 1, },\n    { name: 'Kinshasa', color: 'yellow', count: 1, },\n    { name: 'Kolkata', color: 'black', count: 1, },\n    { name: 'Lagos', color: 'yellow', count: 1, },\n    { name: 'Lima', color: 'yellow', count: 1, },\n    { name: 'London', color: 'blue', count: 1, },\n    { name: 'Los Angeles', color: 'yellow', count: 1, },\n    { name: 'Madrid', color: 'blue', count: 1, },\n    { name: 'Manila', color: 'red', count: 1, },\n    { name: 'Mexico City', color: 'yellow', count: 1, },\n    { name: 'Miami', color: 'yellow', count: 1, },\n    { name: 'Milan', color: 'blue', count: 1, },\n    { name: 'Montréal', color: 'blue', count: 1, },\n    { name: 'Moscow', color: 'black', count: 1, },\n    { name: 'Mumbai', color: 'black', count: 1, },\n    { name: 'New York', color: 'blue', count: 1, },\n    { name: 'Osaka', color: 'red', count: 1, },\n    { name: 'Paris', color: 'blue', count: 1, },\n    { name: 'Riyadh', color: 'black', count: 1, },\n    { name: 'San Francisco', color: 'blue', count: 1, },\n    { name: 'Santiago', color: 'yellow', count: 1, },\n    { name: 'São Paulo', color: 'yellow', count: 1, },\n    { name: 'Seoul', color: 'red', count: 1, },\n    { name: 'Shanghai', color: 'red', count: 1, },\n    { name: 'St. Petersburg', color: 'blue', count: 1, },\n    { name: 'Sydney', color: 'red', count: 1, },\n    { name: 'Taipei', color: 'red', count: 1, },\n    { name: 'Tehran', color: 'black', count: 1, },\n    { name: 'Tokyo', color: 'red', count: 1, },\n    { name: 'Washington', color: 'blue', count: 1, },\n];\n\nconst Config = ({id}) => {\n    const [players, PlayerCount] = usePlayerCountFormField();\n    const [epidemics, EpidemicCount] = useEpidemicCountFormField(4, 6, 5);\n\n    return (\n        <>\n            <PlayerCount />\n            <EpidemicCount />\n            <SaveConfig id={id} config={{\n                players,\n                epidemics\n            }} />\n        </>\n    );\n};\n\nexport const VanillaGame = {\n    name: 'Vanilla',\n    Config,\n    cities\n};\n","import React from 'react';\nimport { SaveConfig } from './save';\nimport { Form } from 'react-bootstrap';\nimport { usePlayerCountFormField } from './form-fields';\n\nconst cities = () => [\n    { name: 'Algiers', color: 'black', count: 1, },\n    { name: 'Atlanta', color: 'blue', count: 1, },\n    { name: 'Baghdad', color: 'black', count: 1, },\n    { name: 'Bangkok', color: 'red', count: 1, },\n    { name: 'Beijing', color: 'red', count: 1, },\n    { name: 'Bogotá', color: 'yellow', count: 1, },\n    { name: 'Buenos Aires', color: 'yellow', count: 1, },\n    { name: 'Cairo', color: 'black', count: 1, },\n    { name: 'Chennai', color: 'black', count: 1, },\n    { name: 'Chicago', color: 'blue', count: 1, },\n    { name: 'Delhi', color: 'black', count: 1, },\n    { name: 'Essen', color: 'blue', count: 1, },\n    { name: 'Ho Chi Minh City', color: 'red', count: 1, },\n    { name: 'Hong Kong', color: 'red', count: 1, },\n    { name: 'Istanbul', color: 'black', count: 1, },\n    { name: 'Jakarta', color: 'red', count: 1, },\n    { name: 'Johannesburg', color: 'yellow', count: 1, },\n    { name: 'Karachi', color: 'black', count: 1, },\n    { name: 'Khartoum', color: 'yellow', count: 1, },\n    { name: 'Kinshasa', color: 'yellow', count: 1, },\n    { name: 'Kolkata', color: 'black', count: 1, },\n    { name: 'Lagos', color: 'yellow', count: 1, },\n    { name: 'Lima', color: 'yellow', count: 1, },\n    { name: 'London', color: 'blue', count: 1, },\n    { name: 'Los Angeles', color: 'yellow', count: 1, },\n    { name: 'Madrid', color: 'blue', count: 1, },\n    { name: 'Manila', color: 'red', count: 1, },\n    { name: 'Mexico City', color: 'yellow', count: 1, },\n    { name: 'Miami', color: 'yellow', count: 1, },\n    { name: 'Milan', color: 'blue', count: 1, },\n    { name: 'Montréal', color: 'blue', count: 1, },\n    { name: 'Moscow', color: 'black', count: 1, },\n    { name: 'Mumbai', color: 'black', count: 1, },\n    { name: 'New York', color: 'blue', count: 1, },\n    { name: 'Osaka', color: 'red', count: 1, },\n    { name: 'Paris', color: 'blue', count: 1, },\n    { name: 'Riyadh', color: 'black', count: 1, },\n    { name: 'San Francisco', color: 'blue', count: 1, },\n    { name: 'Santiago', color: 'yellow', count: 1, },\n    { name: 'São Paulo', color: 'yellow', count: 1, },\n    { name: 'Seoul', color: 'red', count: 1, },\n    { name: 'Shanghai', color: 'red', count: 1, },\n    { name: 'St. Petersburg', color: 'blue', count: 1, },\n    { name: 'Sydney', color: 'red', count: 1, },\n    { name: 'Taipei', color: 'red', count: 1, },\n    { name: 'Tehran', color: 'black', count: 1, },\n    { name: 'Tokyo', color: 'red', count: 1, },\n    { name: 'Washington', color: 'blue', count: 1, },\n];\n\nconst Config = ({id}) => {\n    const [players, PlayerCount] = usePlayerCountFormField();\n\n    return (\n        <>\n            <PlayerCount />\n            <Form.Group controlId='init.game-config'>\n                <span className='text-muted'>No configuration options.</span>\n            </Form.Group>\n            <SaveConfig id={id} config={{\n                players\n            }} />\n        </>\n    );\n};\n\nexport const Legacy1Game = {\n    name: 'Legacy Season 1',\n    Config,\n    cities\n};\n","import React, { useState } from 'react';\nimport { SaveConfig } from './save';\nimport { useEpidemicCountFormField, usePlayerCountFormField } from './form-fields';\nimport { Col, Form } from 'react-bootstrap';\n\nconst startingCities = [\n    { name: 'Cairo', color: 'black', count: 3, },\n    { name: 'Istanbul', color: 'black', count: 3, },\n    { name: 'Jacksonville', color: 'yellow', count: 3, },\n    { name: 'Lagos', color: 'yellow', count: 3, },\n    { name: 'London', color: 'blue', count: 3, },\n    { name: 'New York', color: 'blue', count: 3, },\n    { name: 'São Paulo', color: 'yellow', count: 3, },\n    { name: 'Tripoli', color: 'black', count: 3, },\n    { name: 'Washington', color: 'blue', count: 3, },\n];\n\nconst allRecons = [\n    {\n        name: 'North America',\n        cities: [\n            { name: 'Atlanta', color: 'blue', count: 1, },\n            { name: 'Chicago', color: 'blue', count: 2, },\n            { name: 'Denver', color: 'blue', count: 1, },\n            { name: 'Los Angeles', color: 'yellow', count: 1, },\n            { name: 'Mexico City', color: 'yellow', count: 1, },\n            { name: 'San Francisco', color: 'blue', count: 2, },\n        ]\n    },\n    {\n        name: 'South America',\n        cities: [\n            { name: 'Bogotá', color: 'yellow', count: 2, },\n            { name: 'Buenos Aires', color: 'yellow', count: 2, },\n            { name: 'Lima', color: 'yellow', count: 1, },\n            { name: 'Santiago', color: 'yellow', count: 1, },\n        ]\n    },\n    {\n        name: 'Europe',\n        cities: [\n            { name: 'Frankfurt', color: 'blue', count: 2, },\n            { name: 'Moscow', color: 'black', count: 1, },\n            { name: 'Paris', color: 'blue', count: 2, },\n            { name: 'St. Petersburg', color: 'blue', count: 1, },\n        ]\n    },\n    {\n        name: 'Africa',\n        cities: [\n            { name: 'Antananarivo', color: 'black', count: 2, },\n            { name: 'Dar es Salaam', color: 'yellow', count: 2, },\n            { name: 'Johannesburg', color: 'blue', count: 2, },\n            { name: 'Khartoum', color: 'yellow', count: 1, },\n            { name: 'Kinshasa', color: 'yellow', count: 1, },\n        ]\n    }\n];\n\nconst cities = ({ recons }) => {\n    const enabledCities = Object.entries(recons).flatMap(([reconId, connected]) => {\n        return allRecons[reconId].cities.filter((_, id) => connected.includes(id));\n    });\n\n    return startingCities.concat(enabledCities).sort((a, b) => a.name.localeCompare(b.name));\n};\n\nconst Config = ({ id: gameId }) => {\n    const [players, PlayerCount] = usePlayerCountFormField();\n    const [epidemics, EpidemicCount] = useEpidemicCountFormField(1, 20, 5);\n    const [recons, setRecons] = useState({});\n    const possibleRecons = allRecons;\n\n    const isReconEnabled = (id) => !!recons[id];\n\n    const toggleRecon = (id) => {\n        if(isReconEnabled(id)) {\n            delete recons[id];\n            setRecons({\n                ...recons\n            });\n        } else {\n            setRecons({\n                ...recons,\n                [id]: allRecons[id].cities.map((_, i) => i)\n            })\n        }\n    };\n\n    const potentialCities = Object.keys(recons).flatMap(reconId => {\n        return possibleRecons[reconId].cities.map((city, id) => ({\n            reconId,\n            id,\n            city\n        }))\n    });\n\n    potentialCities.sort((a, b) => a.city.name.localeCompare(b.city.name));\n\n    const isCityConnected = (reconId, id) => recons[reconId].includes(id);\n    const toggleCity = (reconId, id) => {\n        if(isCityConnected(reconId, id)) {\n            recons[reconId] = recons[reconId].filter(cityId => cityId !== id);\n            setRecons({\n                ...recons\n            });\n        } else {\n            recons[reconId] = recons[reconId].concat([id]);\n            setRecons({\n                ...recons\n            });\n        }\n    };\n\n    return (\n        <>\n            <PlayerCount />\n            <EpidemicCount />\n            <Form.Row className='mb-3'>\n                <Form.Label column xs='8'>Recons Completed</Form.Label>\n                <Col xs='4'>\n                    {possibleRecons.map((recon, i) => (\n                        <Form.Group key={i} controlId={`init.game-config.recons.${i}`} className='mb-1'>\n                            <Form.Check type='switch' label={recon.name} checked={isReconEnabled(i)} onChange={() => toggleRecon(i)} />\n                        </Form.Group>\n                    ))}\n                </Col>\n            </Form.Row>\n            {potentialCities.length > 0 && <Form.Row className='mb-3'>\n                <Form.Label column xs='8'>Cities Connected</Form.Label>\n                <Col xs='4'>\n                    {potentialCities.map(({ reconId, id, city }) => (\n                        <Form.Group key={`${reconId}.${id}`} controlId={`init.game-config.cities.${reconId}.${id}`} className='mb-1'>\n                            <Form.Check type='switch' label={city.name} checked={isCityConnected(reconId, id)} onChange={() => toggleCity(reconId, id)} />\n                        </Form.Group>\n                    ))}\n                </Col>\n            </Form.Row>}\n            <SaveConfig id={gameId} config={{\n                players,\n                epidemics,\n                recons\n            }} />\n        </>\n    );\n};\n\nexport const Legacy2Game = {\n    name: 'Legacy Season 2',\n    Config,\n    cities\n};\n","import { VanillaGame } from './vanilla';\nimport { Legacy1Game } from './legacy-1';\nimport { Legacy2Game } from './legacy-2';\n\nexport const games = [\n    VanillaGame,\n    Legacy1Game,\n    Legacy2Game\n];\n","import React, { useState } from 'react';\nimport { Button, Modal } from 'react-bootstrap';\nimport { AlertTriangle, ArrowClockwise, CapslockFill, ThreeDotsVertical, TrashFill } from 'react-bootstrap-icons';\nimport { createUseStyles } from 'react-jss';\n\nconst colors = {\n    blue: 'rgba(52, 152, 219, 0.8)',\n    red: 'rgba(231, 76, 60, 0.7)',\n    yellow: 'rgba(241, 224, 19, 0.6)',\n    black: 'rgba(127, 140, 141, 0.8)'\n};\n\nconst useStyles = createUseStyles({\n    card: {\n        fontWeight: 400,\n        fontSize: '18px',\n        padding: '5px 7px',\n        borderBottom: '1px solid #6b6b6b',\n        '& > span': {\n            height: '50px',\n            lineHeight: '34px'\n        },\n\n        backgroundColor: props => colors[props.color],\n    },\n    extra: {\n        paddingLeft: '0 !important',\n        '& button': {\n            paddingLeft: '0 !important',\n            paddingRight: '0 !important',\n        }\n    },\n    extraModalButton: {\n        width: '100%',\n        marginTop: '10px'\n    }\n});\n\nexport const Card = ({ card, infect, epidemic, remove, unremove, showEpidemic, showDraw }) => {\n    const [showModal, setShowModal] = useState(false);\n    const handleCloseModal = () => setShowModal(false);\n    const handleShowModal = () => setShowModal(true);\n\n    const { city, id, count } = card;\n    const { color, name, count: total } = city;\n\n    const styles = useStyles({color});\n\n    const closeWithAction = (fn) => () => {\n        handleCloseModal();\n        fn(id);\n    };\n\n    const modalButtons = [];\n    if(infect && !showDraw) {\n        modalButtons.push((\n            <Button className={styles.extraModalButton} size='lg' variant='primary' onClick={closeWithAction(infect)}>\n                <CapslockFill size={26}/> Force Draw\n            </Button>\n        ))\n    }\n    if(epidemic && !showEpidemic) {\n        modalButtons.push((\n            <Button className={styles.extraModalButton} size='lg' variant='success' onClick={closeWithAction(epidemic)}>\n                <AlertTriangle size={26}/> Force Epidemic\n            </Button>\n        ))\n    }\n    if(remove) {\n        modalButtons.push((\n            <Button className={styles.extraModalButton} size='lg' variant='danger' onClick={closeWithAction(remove)}>\n                <TrashFill size={26}/> Remove from Play\n            </Button>\n        ))\n    }\n    if(unremove) {\n        modalButtons.push((\n            <Button className={styles.extraModalButton} size='lg' variant='primary' onClick={closeWithAction(unremove)}>\n                <ArrowClockwise size={26}/> Return to Play\n            </Button>\n        ))\n    }\n\n    const hasModalButtons = modalButtons.length !== 0;\n    const nameSection = (<span className='mr-auto p-2'>{name}</span>);\n    const countSection = (<span className='p-2 text-monospace'>\n        <span>{count}</span><span className='text-muted text-monospace'>/</span><span className='text-muted text-monospace'>{total}</span>\n    </span>);\n\n    return (\n        <div className={`d-flex ${styles.card}`}>\n            {nameSection}\n            {countSection}\n            {showDraw && infect && <span className='p-2'>\n                <Button size='xs' onClick={() => infect(id)}><CapslockFill size={18}/></Button>\n            </span>}\n            {showEpidemic && epidemic && <span className='p-2'>\n                <Button variant='success' size='xs' onClick={() => epidemic(id)}><AlertTriangle size={18}/></Button>\n            </span>}\n            {hasModalButtons && <span className={`p-2 ${styles.extra}`}>\n                <Button variant='secondary-outline' size='xs' onClick={handleShowModal}>\n                    <ThreeDotsVertical size={18}/>\n                </Button>\n            </span>}\n            {hasModalButtons && <Modal show={hasModalButtons && showModal} onHide={handleCloseModal}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Additional Actions</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className={`d-flex ${styles.card}`}>\n                        {nameSection}\n                        {countSection}\n                    </div>\n                    {modalButtons.map((button, i) => (<div key={i}>{button}</div>))}\n                </Modal.Body>\n            </Modal>}\n        </div>\n    );\n};\n","export const explodeDeck = (deck, cities) => {\n    const seen = {};\n    const explodedDeck = {};\n    explodedDeck.epidemics = deck.epidemics.slice(0).reverse().map(section => explodeSection(cities, seen, section));\n    explodedDeck.discard = explodeSection(cities, seen, deck.discard);\n    explodedDeck.removed = explodeSection(cities, seen, deck.removed);\n    const missingSection = createMissingCardSection(cities, seen);\n    explodedDeck.unseen = explodeSection(cities, null, missingSection);\n    return { explodedDeck, missingSection };\n};\n\nconst createMissingCardSection = (cities, seen) => {\n    const section = {};\n    cities.forEach((city, id) => {\n        const count = countInSection(id, seen);\n        if(city.count > count) {\n            addToSection(id, section, city.count - count);\n        }\n    });\n\n    return section;\n};\n\nconst explodeSection = (cities, seen, deckSection) => {\n    const section = [];\n    Object.entries(deckSection).forEach(([id, count]) => {\n        const first = seen ? countInSection(id, seen) === 0 : false;\n        section.push(explodeCard(id, count, first, cities[id]));\n        if(seen) {\n            addToSection(id, seen, count);\n        }\n    });\n\n    section.sort((a, b) => a.city.name.localeCompare(b.city.name));\n\n    return section;\n};\n\nconst explodeCard = (id, count, first, city) => ({\n    city,\n    id,\n    count,\n    first\n});\n\nconst countInSection = (id, section) => {\n    return section[id] || 0;\n};\n\nexport const removeFromSection = (id, section) => {\n    const count = countInSection(id, section);\n    if(count > 0) {\n        if(count > 1) {\n            section[id]--;\n        } else {\n            delete section[id];\n        }\n\n        return true\n    }\n    return false\n};\n\nconst addToSection = (id, section, count = 1) => {\n    if(countInSection(id, section) <= 0) {\n        section[id] = 0;\n    }\n\n    section[id] = section[id] + count;\n};\n\nconst removeFromDeck = (id, ...sections) => {\n    sections.find(section => removeFromSection(id, section));\n};\n\nexport const removeFromTopOfDeck = (id, unseen, epidemics) => removeFromDeck(id, ...([unseen, ...epidemics].reverse()));\nexport const removeFromBottomOfDeck = (id, unseen, epidemics) => removeFromDeck(id, unseen, ...epidemics);\n\nexport const addCard = (id, section) => {\n    if(!section[id]) {\n        section[id] = 0;\n    }\n\n    section[id]++\n};\n","import { createUseStyles } from 'react-jss';\nimport { useAppState } from '../state';\nimport { SkipBackward, SkipForward, Trash, BootstrapReboot } from 'react-bootstrap-icons';\nimport { Button } from 'react-bootstrap';\nimport React from 'react';\n\nexport const footerHeight = '60px';\nconst useStyles = createUseStyles({\n    footer: {\n        backgroundColor: '#f3f3f3',\n        height: footerHeight,\n        lineHeight: footerHeight,\n        fontSize: '20px',\n        boxSizing: 'border-box',\n        borderTop: '1px solid #5f5f5f',\n        position: 'fixed',\n        bottom: 0,\n        width: '100%',\n    },\n    buttons: {\n        padding: '0 15px',\n        flexGrow: 1,\n        textAlign: 'center',\n        '& button': {\n            marginRight: '15px',\n            '&:last-child': {\n                marginRight: 0\n            }\n        }\n    }\n});\n\nexport const Footer = () => {\n    const [state, setState] = useAppState();\n    const styles = useStyles();\n\n    const reset = () => setState({\n        game: state.game,\n        config: state.config\n    });\n\n    return (\n        <div className={`d-flex ${styles.footer}`}>\n            <span className={styles.buttons}>\n                <Button variant=\"outline-primary\" onClick={() => window.history.back()}><SkipBackward size={24} /></Button>\n                <Button variant=\"outline-secondary\" onClick={reset}><BootstrapReboot size={24} /></Button>\n                <Button variant=\"outline-danger\" onClick={() => setState({})}><Trash size={24} /></Button>\n                <Button variant=\"outline-primary\" onClick={() => window.history.forward()}><SkipForward size={24} /></Button>\n            </span>\n        </div>\n    )\n};\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { useAppState } from '../state';\nimport { games } from '../config';\nimport { Card } from './card';\nimport { addCard, explodeDeck, removeFromBottomOfDeck, removeFromSection, removeFromTopOfDeck } from './deck-utils';\nimport { createUseStyles } from 'react-jss';\nimport { Footer, footerHeight } from './footer';\n\nconst useStyles = createUseStyles({\n    content: {\n        padding: `0 0 ${footerHeight} 0`\n    },\n    sectionTitle: {\n        padding: '25px 15px',\n        margin: 0,\n        borderBottom: '1px solid #5f5f5f'\n    }\n});\n\nexport const Infections = () => {\n    const styles = useStyles();\n    const [game] = useAppState('game');\n    const [config] = useAppState('config');\n    const cities = games[game].cities(config);\n    const [deck, setDeck] = useAppState('infectionDeck', () => ({\n        epidemics: [],\n        discard: {},\n        removed: {},\n    }));\n\n    const { explodedDeck, missingSection } = explodeDeck(deck, cities);\n\n    const infect = (id) => {\n        removeFromTopOfDeck(id, missingSection, deck.epidemics);\n        addCard(id, deck.discard);\n        setDeck({\n            ...deck\n        });\n    };\n\n    const epidemic = (id) => {\n        removeFromBottomOfDeck(id, missingSection, deck.epidemics);\n        addCard(id, deck.discard);\n        deck.epidemics.push(deck.discard);\n        deck.discard = {};\n        setDeck({\n            ...deck\n        });\n    };\n\n    const remove = (section) => (id) => {\n        removeFromSection(id, section);\n        addCard(id, deck.removed);\n        setDeck(deck);\n    };\n\n    const unremove = (id) => {\n        removeFromSection(id, deck.removed);\n        setDeck(deck);\n    };\n\n    return (\n        <>\n            <Container fluid className={styles.content}>\n                {\n                    explodedDeck.epidemics.map((cards, i) => (\n                        <DeckSection\n                            key={i}\n                            name={`Epidemic #${explodedDeck.epidemics.length - i}`}\n                            cards={cards}\n                            infect={infect}\n                            epidemic={epidemic}\n                            remove={remove(deck.epidemics[(deck.epidemics.length - 1) - i])}\n                            showEpidemic={false}\n                            showDraw={explodedDeck.epidemics.slice(0, i).flatMap(e => e).length === 0}\n                        />\n                    ))\n                }\n                <DeckSection\n                    name='Main Deck'\n                    cities={cities}\n                    cards={explodedDeck.unseen}\n                    infect={infect}\n                    epidemic={epidemic}\n                    remove={remove(missingSection)}\n                    showEpidemic={true}\n                    showDraw={explodedDeck.epidemics.flatMap(e => e).length === 0}\n                />\n                <DeckSection\n                    name='Discard'\n                    cities={cities}\n                    cards={explodedDeck.discard}\n                    remove={remove(deck.discard)}\n                />\n                <DeckSection\n                    name='Removed from Play'\n                    cities={cities}\n                    cards={explodedDeck.removed}\n                    unremove={unremove}\n                />\n            </Container>\n            <Footer />\n        </>\n    );\n};\n\nconst DeckSection = ({ name, cards, infect, epidemic, remove, unremove, showEpidemic, showDraw }) => {\n    const styles = useStyles();\n    if(!cards || cards.length <= 0) {\n        return (<></>);\n    }\n\n    return (\n        <div>\n            <h3 className={styles.sectionTitle}>{name}</h3>\n            {cards.map((card, i) => (\n                <Card\n                    key={i}\n                    card={card}\n                    infect={infect}\n                    epidemic={epidemic}\n                    remove={remove}\n                    unremove={unremove}\n                    showEpidemic={showEpidemic}\n                    showDraw={showDraw}\n                />\n            ))}\n        </div>\n    )\n};\n\n","import React, { useState } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { games } from './index';\n\nexport const Initialize = () => {\n    const [selectedGame, setSelectedGame] = useState(0);\n    const GameConfig = games[selectedGame].Config;\n\n    return (\n        <Container fluid className='main-content'>\n            <h3>Start a New Game</h3>\n            <Form>\n                <Form.Group controlId='init.game-name'>\n                    <Form.Label>Game Version</Form.Label>\n                    <Form.Control as='select' value={selectedGame} onChange={(e) => setSelectedGame(e.target.value)}>\n                        {\n                            games.map((game, i) => (<option key={i} value={i}>{game.name}</option>))\n                        }\n                    </Form.Control>\n                </Form.Group>\n                <GameConfig id={selectedGame} />\n            </Form>\n        </Container>\n    );\n};\n","import React from 'react';\nimport { Infections } from './infection';\nimport { useAppState } from './state';\nimport { Initialize } from './config/init';\n\nexport const App = () => {\n    const [game] = useAppState('game');\n\n    if(!game && game !== 0) {\n        return (<Initialize />)\n    }\n\n    return (<Infections />);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { App } from './app';\nimport { AppStateProvider } from './state';\n\nconst Main = () => (\n    <AppStateProvider>\n        <App />\n    </AppStateProvider>\n);\n\nReactDOM.render(<Main />, document.getElementById('root'));\n"],"sourceRoot":""}