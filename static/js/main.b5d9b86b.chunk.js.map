{"version":3,"sources":["state.js","config/save.js","config/form-fields.js","config/index.js","config/vanilla.js","config/legacy-1.js","config/legacy-2.js","tab/infection/card.js","tab/infection/deck-utils.js","tab/infection/index.js","config/init.js","app.js","index.js"],"names":["readBrowserHash","hash","window","location","JSON","parse","Buffer","from","toString","context","createContext","undefined","AppStateProvider","children","useState","state","setState","console","log","Provider","value","useAppState","key","defaultValueFn","useContext","updateHash","obj","stringify","writeBrowserHash","useEffect","listener","addEventListener","removeEventListener","actualState","updateState","newSubState","newState","SaveConfig","id","config","Form","Group","controlId","Button","variant","type","onClick","game","size","useEpidemicCountFormField","min","max","starting","epidemics","setEpidemics","increment","decrement","as","Row","Label","column","xs","Col","InputGroup","className","Prepend","disabled","Control","Append","games","name","Config","EpidemicCount","cities","color","count","Card","card","infect","epidemic","remove","unremove","showEpidemic","showDraw","showModal","setShowModal","handleCloseModal","city","total","closeWithAction","fn","modalButtons","push","hasModalButtons","length","nameSection","countSection","Modal","show","onHide","Header","closeButton","Title","Body","map","button","i","createMissingCardSection","seen","section","forEach","countInSection","addToSection","explodeSection","deckSection","Object","entries","first","explodeCard","sort","a","b","localeCompare","removeFromSection","removeFromDeck","sections","find","addCard","Infections","discard","removed","deck","setDeck","explodedDeck","slice","reverse","missingSection","unseen","explodeDeck","removeFromTopOfDeck","removeFromBottomOfDeck","Container","fluid","cards","flatMap","e","DeckSection","Initialize","selectedGame","setSelectedGame","GameConfig","onChange","target","App","navigation","setNavigation","Nav","activeKey","onSelect","k","Item","Link","eventKey","inline","history","back","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b5d9b86b.chunk.js","sourcesContent":["import React, { useEffect, createContext, useContext, useState } from 'react';\n\nconst readBrowserHash = () => {\n    const hash = window.location.hash;\n    if(!hash) {\n        return {}\n    }\n\n    return JSON.parse(Buffer.from(hash, 'base64').toString());\n};\nconst writeBrowserHash = (obj) => window.location.hash = Buffer.from(JSON.stringify(obj)).toString(\"base64\");\n\nconst context = createContext(undefined);\n\nexport const AppStateProvider = ({children}) => {\n    const [state, setState] = useState(readBrowserHash());\n    console.log(state);\n    const { Provider } = context;\n    return (\n        <Provider value={[state, setState]}>{children}</Provider>\n    );\n};\n\nexport const useAppState = (key, defaultValueFn) => {\n    const [state, setState] = useContext(context);\n    const updateHash = (obj) => {\n        writeBrowserHash(obj);\n    };\n\n    useEffect(() => {\n        const listener = () => setState(readBrowserHash());\n\n        window.addEventListener('hashchange', listener);\n        return () => window.removeEventListener('hashchange', listener);\n    });\n\n    const actualState = !key ? state : state[key];\n    const updateState = !key ? (newState) => updateHash(newState) : (newSubState) => {\n        const newState = {\n            ...state,\n            [key]: newSubState\n        };\n        updateHash(newState)\n    };\n\n    return [actualState === undefined && defaultValueFn ? defaultValueFn() : actualState, updateState]\n};\n","import React from 'react';\nimport { useAppState } from '../state';\nimport { Button, Form } from 'react-bootstrap';\nimport { CheckCircle } from 'react-bootstrap-icons';\n\nexport const SaveConfig = ({id, config}) => {\n    const [, setState] = useAppState();\n    const save = () => setState({\n        game: id,\n        config: config,\n    });\n\n    return (\n        <Form.Group controlId='init.save-config'>\n            <Button variant=\"success\" type=\"submit\" onClick={save}>\n                <CheckCircle size={24} /> Start\n            </Button>\n        </Form.Group>\n    );\n};\n","import React, { useState } from 'react';\nimport { Button, Col, Form, InputGroup, Row } from 'react-bootstrap';\n\nexport const useEpidemicCountFormField = (min, max, starting) => {\n    const [epidemics, setEpidemics] = useState(starting);\n    const increment = () => {\n        if(epidemics < max) {\n            setEpidemics(epidemics + 1);\n        }\n    };\n    const decrement = () => {\n        if(epidemics > min) {\n            setEpidemics(epidemics - 1);\n        }\n    };\n\n    return [epidemics, () => (\n        <Form.Group as={Row} controlId='init.game-config.epidemics'>\n            <Form.Label column xs=\"8\">Epidemic Count</Form.Label>\n            <Col xs=\"4\">\n                <InputGroup size=\"md\" className=\"mb-3\">\n                    <InputGroup.Prepend>\n                        <Button variant=\"outline-secondary\" onClick={decrement} disabled={epidemics === min}>-</Button>\n                    </InputGroup.Prepend>\n                    <Form.Control type='text' disabled={true} value={epidemics} />\n                    <InputGroup.Append>\n                        <Button variant=\"outline-secondary\" onClick={increment} disabled={epidemics === max}>+</Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </Col>\n        </Form.Group>\n    )]\n};\n","import { VanillaGame } from './vanilla';\nimport { Legacy1Game } from './legacy-1';\nimport { Legacy2Game } from './legacy-2';\n\nexport const games = [\n    VanillaGame,\n    Legacy1Game,\n    Legacy2Game\n];\n","import React from 'react';\nimport { SaveConfig } from './save';\nimport { useEpidemicCountFormField } from './form-fields';\n\nconst cities = [\n    { name: 'Algiers', color: 'black', count: 1, },\n    { name: 'Atlanta', color: 'blue', count: 1, },\n    { name: 'Baghdad', color: 'black', count: 1, },\n    { name: 'Bangkok', color: 'red', count: 1, },\n    { name: 'Beijing', color: 'red', count: 1, },\n    { name: 'Bogotá', color: 'yellow', count: 1, },\n    { name: 'Buenos Aires', color: 'yellow', count: 1, },\n    { name: 'Cairo', color: 'black', count: 1, },\n    { name: 'Chennai', color: 'black', count: 1, },\n    { name: 'Chicago', color: 'blue', count: 1, },\n    { name: 'Delhi', color: 'black', count: 1, },\n    { name: 'Essen', color: 'blue', count: 1, },\n    { name: 'Ho Chi Minh City', color: 'red', count: 1, },\n    { name: 'Hong Kong', color: 'red', count: 1, },\n    { name: 'Istanbul', color: 'black', count: 1, },\n    { name: 'Jakarta', color: 'red', count: 1, },\n    { name: 'Johannesburg', color: 'yellow', count: 1, },\n    { name: 'Karachi', color: 'black', count: 1, },\n    { name: 'Khartoum', color: 'yellow', count: 1, },\n    { name: 'Kinshasa', color: 'yellow', count: 1, },\n    { name: 'Kolkata', color: 'black', count: 1, },\n    { name: 'Lagos', color: 'yellow', count: 1, },\n    { name: 'Lima', color: 'yellow', count: 1, },\n    { name: 'London', color: 'blue', count: 1, },\n    { name: 'Los Angeles', color: 'yellow', count: 1, },\n    { name: 'Madrid', color: 'blue', count: 1, },\n    { name: 'Manila', color: 'red', count: 1, },\n    { name: 'Mexico City', color: 'yellow', count: 1, },\n    { name: 'Miami', color: 'yellow', count: 1, },\n    { name: 'Milan', color: 'blue', count: 1, },\n    { name: 'Montréal', color: 'blue', count: 1, },\n    { name: 'Moscow', color: 'black', count: 1, },\n    { name: 'Mumbai', color: 'black', count: 1, },\n    { name: 'New York', color: 'blue', count: 1, },\n    { name: 'Osaka', color: 'red', count: 1, },\n    { name: 'Paris', color: 'blue', count: 1, },\n    { name: 'Riyadh', color: 'black', count: 1, },\n    { name: 'San Francisco', color: 'blue', count: 1, },\n    { name: 'Santiago', color: 'yellow', count: 1, },\n    { name: 'São Paulo', color: 'yellow', count: 1, },\n    { name: 'Seoul', color: 'red', count: 1, },\n    { name: 'Shanghai', color: 'red', count: 1, },\n    { name: 'St. Petersburg', color: 'blue', count: 1, },\n    { name: 'Sydney', color: 'red', count: 1, },\n    { name: 'Taipei', color: 'red', count: 1, },\n    { name: 'Tehran', color: 'black', count: 1, },\n    { name: 'Tokyo', color: 'red', count: 1, },\n    { name: 'Washington', color: 'blue', count: 1, },\n];\n\nconst Config = ({id}) => {\n    const [epidemics, EpidemicCount] = useEpidemicCountFormField(4, 6, 5);\n\n    return (\n        <>\n            <EpidemicCount />\n            <SaveConfig id={id} config={{\n                epidemics\n            }} />\n        </>\n    );\n};\n\nexport const VanillaGame = {\n    name: 'Vanilla',\n    Config,\n    cities\n};\n","import React from 'react';\nimport { SaveConfig } from './save';\nimport { Form } from 'react-bootstrap';\n\nconst cities = [\n    { name: 'Algiers', color: 'black', count: 1, },\n    { name: 'Atlanta', color: 'blue', count: 1, },\n    { name: 'Baghdad', color: 'black', count: 1, },\n    { name: 'Bangkok', color: 'red', count: 1, },\n    { name: 'Beijing', color: 'red', count: 1, },\n    { name: 'Bogotá', color: 'yellow', count: 1, },\n    { name: 'Buenos Aires', color: 'yellow', count: 1, },\n    { name: 'Cairo', color: 'black', count: 1, },\n    { name: 'Chennai', color: 'black', count: 1, },\n    { name: 'Chicago', color: 'blue', count: 1, },\n    { name: 'Delhi', color: 'black', count: 1, },\n    { name: 'Essen', color: 'blue', count: 1, },\n    { name: 'Ho Chi Minh City', color: 'red', count: 1, },\n    { name: 'Hong Kong', color: 'red', count: 1, },\n    { name: 'Istanbul', color: 'black', count: 1, },\n    { name: 'Jakarta', color: 'red', count: 1, },\n    { name: 'Johannesburg', color: 'yellow', count: 1, },\n    { name: 'Karachi', color: 'black', count: 1, },\n    { name: 'Khartoum', color: 'yellow', count: 1, },\n    { name: 'Kinshasa', color: 'yellow', count: 1, },\n    { name: 'Kolkata', color: 'black', count: 1, },\n    { name: 'Lagos', color: 'yellow', count: 1, },\n    { name: 'Lima', color: 'yellow', count: 1, },\n    { name: 'London', color: 'blue', count: 1, },\n    { name: 'Los Angeles', color: 'yellow', count: 1, },\n    { name: 'Madrid', color: 'blue', count: 1, },\n    { name: 'Manila', color: 'red', count: 1, },\n    { name: 'Mexico City', color: 'yellow', count: 1, },\n    { name: 'Miami', color: 'yellow', count: 1, },\n    { name: 'Milan', color: 'blue', count: 1, },\n    { name: 'Montréal', color: 'blue', count: 1, },\n    { name: 'Moscow', color: 'black', count: 1, },\n    { name: 'Mumbai', color: 'black', count: 1, },\n    { name: 'New York', color: 'blue', count: 1, },\n    { name: 'Osaka', color: 'red', count: 1, },\n    { name: 'Paris', color: 'blue', count: 1, },\n    { name: 'Riyadh', color: 'black', count: 1, },\n    { name: 'San Francisco', color: 'blue', count: 1, },\n    { name: 'Santiago', color: 'yellow', count: 1, },\n    { name: 'São Paulo', color: 'yellow', count: 1, },\n    { name: 'Seoul', color: 'red', count: 1, },\n    { name: 'Shanghai', color: 'red', count: 1, },\n    { name: 'St. Petersburg', color: 'blue', count: 1, },\n    { name: 'Sydney', color: 'red', count: 1, },\n    { name: 'Taipei', color: 'red', count: 1, },\n    { name: 'Tehran', color: 'black', count: 1, },\n    { name: 'Tokyo', color: 'red', count: 1, },\n    { name: 'Washington', color: 'blue', count: 1, },\n];\n\nconst Config = ({id}) => (\n    <>\n        <Form.Group controlId='init.game-config'>\n            <span className='text-muted'>No configuration options.</span>\n        </Form.Group>\n        <SaveConfig id={id} config={{}} />\n    </>\n);\n\nexport const Legacy1Game = {\n    name: 'Legacy Season 1',\n    Config,\n    cities\n};\n","import React from 'react';\nimport { SaveConfig } from './save';\nimport { useEpidemicCountFormField } from './form-fields';\n\nconst cities = [\n];\n\nconst Config = ({id}) => {\n    const [epidemics, EpidemicCount] = useEpidemicCountFormField(1, 20, 5);\n\n    return (\n        <>\n            <EpidemicCount />\n            <SaveConfig id={id} config={{\n                epidemics\n            }} />\n        </>\n    );\n};\n\nexport const Legacy2Game = {\n    name: 'Legacy Season 2',\n    Config,\n    cities\n};\n","import React, { useState } from 'react';\nimport { Button, Modal } from 'react-bootstrap';\nimport { AlertTriangle, ArrowClockwise, CapslockFill, ThreeDotsVertical, TrashFill } from 'react-bootstrap-icons';\n\nexport const Card = ({ card, infect, epidemic, remove, unremove, showEpidemic, showDraw }) => {\n    const [showModal, setShowModal] = useState(false);\n    const handleCloseModal = () => setShowModal(false);\n    const handleShowModal = () => setShowModal(true);\n\n    const { city, id, count } = card;\n    const { color, name, count: total } = city;\n\n    const closeWithAction = (fn) => () => {\n        handleCloseModal();\n        fn(id);\n    };\n\n    const modalButtons = [];\n    if(epidemic && !showEpidemic) {\n        modalButtons.push((<Button className='infection-extra-button' size='lg' variant='success'\n                                   onClick={closeWithAction(epidemic)}><AlertTriangle size={26}/> Force\n            Epidemic</Button>))\n    }\n    if(infect && !showDraw) {\n        modalButtons.push((<Button className='infection-extra-button' size='lg' variant='primary'\n                                   onClick={closeWithAction(infect)}><CapslockFill size={26}/> Force Draw</Button>))\n    }\n    if(remove) {\n        modalButtons.push((<Button className='infection-extra-button' size='lg' variant='danger'\n                                   onClick={closeWithAction(remove)}><TrashFill size={26}/> Remove from Play</Button>))\n    }\n    if(unremove) {\n        modalButtons.push((<Button className='infection-extra-button' size='lg' variant='primary'\n                                   onClick={closeWithAction(unremove)}><ArrowClockwise size={26}/> Return to\n            Play</Button>))\n    }\n\n    const hasModalButtons = modalButtons.length !== 0;\n    const nameSection = (<span className='mr-auto p-2'>{name}</span>);\n    const countSection = (<span className='p-2'><span>{count}</span><span className='text-muted'> / </span><span\n        className='text-muted'>{total}</span></span>);\n\n    return (\n        <div className={`d-flex infection-deck-card infection-group-${color}`}>\n            {nameSection}\n            {countSection}\n            {showEpidemic && epidemic &&\n            <span className='p-2'><Button variant='success' size='xs' onClick={() => epidemic(id)}><AlertTriangle\n                size={18}/></Button></span>}\n            {showDraw && infect && <span className='p-2'><Button size='xs' onClick={() => infect(id)}><CapslockFill\n                size={18}/></Button></span>}\n            {hasModalButtons &&\n            <span className='p-2 infection-deck-card-extra'><Button variant='secondary-outline' size='xs'\n                                                                    onClick={handleShowModal}><ThreeDotsVertical\n                size={18}/></Button></span>}\n            {hasModalButtons && <Modal show={hasModalButtons && showModal} onHide={handleCloseModal}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Additional Actions</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className={`d-flex infection-deck-card infection-group-${color}`}>\n                        {nameSection}\n                        {countSection}\n                    </div>\n                    {modalButtons.map((button, i) => (<div key={i}>{button}</div>))}\n                </Modal.Body>\n            </Modal>}\n        </div>\n    );\n};\n","export const explodeDeck = (deck, cities) => {\n    const seen = {};\n    const explodedDeck = {};\n    explodedDeck.epidemics = deck.epidemics.slice(0).reverse().map(section => explodeSection(cities, seen, section));\n    explodedDeck.discard = explodeSection(cities, seen, deck.discard);\n    explodedDeck.removed = explodeSection(cities, seen, deck.removed);\n    const missingSection = createMissingCardSection(cities, seen);\n    explodedDeck.unseen = explodeSection(cities, null, missingSection);\n    return { explodedDeck, missingSection };\n};\n\nconst createMissingCardSection = (cities, seen) => {\n    const section = {};\n    cities.forEach((city, id) => {\n        const count = countInSection(id, seen);\n        if(city.count > count) {\n            addToSection(id, section, city.count - count);\n        }\n    });\n\n    return section;\n};\n\nconst explodeSection = (cities, seen, deckSection) => {\n    const section = [];\n    Object.entries(deckSection).forEach(([id, count]) => {\n        const first = seen ? countInSection(id, seen) === 0 : false;\n        section.push(explodeCard(id, count, first, cities[id]));\n        if(seen) {\n            addToSection(id, seen);\n        }\n    });\n\n    section.sort((a, b) => a.city.name.localeCompare(b.city.name));\n\n    return section;\n};\n\nconst explodeCard = (id, count, first, city) => ({\n    city,\n    id,\n    count,\n    first\n});\n\nconst countInSection = (id, section) => {\n    return section[id] || 0;\n};\n\nexport const removeFromSection = (id, section) => {\n    const count = countInSection(id, section);\n    if(count > 0) {\n        if(count > 1) {\n            section[id]--;\n        } else {\n            delete section[id];\n        }\n\n        return true\n    }\n    return false\n};\n\nconst addToSection = (id, section, count = 1) => {\n    if(countInSection(id, section) <= 0) {\n        section[id] = 0;\n    }\n\n    section[id] = section[id] + count;\n};\n\nconst removeFromDeck = (id, ...sections) => {\n    sections.find(section => removeFromSection(id, section));\n};\n\nexport const removeFromTopOfDeck = (id, unseen, epidemics) => removeFromDeck(id, ...([unseen, ...epidemics].reverse()));\nexport const removeFromBottomOfDeck = (id, unseen, epidemics) => removeFromDeck(id, unseen, ...epidemics);\n\nexport const addCard = (id, section) => {\n    if(!section[id]) {\n        section[id] = 0;\n    }\n\n    section[id]++\n};\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { useAppState } from '../../state';\nimport './index.css';\nimport { games } from '../../config';\nimport { Card } from './card';\nimport { addCard, explodeDeck, removeFromBottomOfDeck, removeFromSection, removeFromTopOfDeck } from './deck-utils';\n\nexport const Infections = () => {\n    const [game] = useAppState('game');\n    const cities = games[game].cities;\n    const [deck, setDeck] = useAppState('infectionDeck', () => ({\n        epidemics: [],\n        discard: {},\n        removed: {},\n    }));\n\n    const { explodedDeck, missingSection } = explodeDeck(deck, cities);\n\n    const infect = (id) => {\n        removeFromTopOfDeck(id, missingSection, deck.epidemics);\n        addCard(id, deck.discard);\n        setDeck(deck);\n    };\n\n    const epidemic = (id) => {\n        removeFromBottomOfDeck(id, missingSection, deck.epidemics);\n        addCard(id, deck.discard);\n        deck.epidemics.push(deck.discard);\n        deck.discard = {};\n        setDeck(deck);\n    };\n\n    const remove = (section) => (id) => {\n        removeFromSection(id, section);\n        addCard(id, deck.removed);\n        setDeck(deck);\n    };\n\n    const unremove = (id) => {\n        removeFromSection(id, deck.removed);\n        setDeck(deck);\n    };\n\n    return (\n        <Container fluid className='infection-content'>\n            {\n                explodedDeck.epidemics.map((cards, i) => (\n                    <DeckSection\n                        key={i}\n                        name={`Epidemic #${explodedDeck.epidemics.length - i}`}\n                        cards={cards}\n                        infect={infect}\n                        epidemic={epidemic}\n                        remove={remove(deck.epidemics[(deck.epidemics.length - 1) - i])}\n                        showEpidemic={false}\n                        showDraw={explodedDeck.epidemics.slice(0, i).flatMap(e => e).length === 0}\n                    />\n                ))\n            }\n            <DeckSection\n                name='Main Deck'\n                cities={cities}\n                cards={explodedDeck.unseen}\n                infect={infect}\n                epidemic={epidemic}\n                remove={remove(missingSection)}\n                showEpidemic={true}\n                showDraw={explodedDeck.epidemics.flatMap(e => e).length === 0}\n            />\n            <DeckSection\n                name='Discard'\n                cities={cities}\n                cards={explodedDeck.discard}\n                remove={remove(deck.discard)}\n            />\n            <DeckSection\n                name='Removed from Play'\n                cities={cities}\n                cards={explodedDeck.removed}\n                unremove={unremove}\n            />\n        </Container>\n    );\n};\n\nconst DeckSection = ({ name, cards, infect, epidemic, remove, unremove, showEpidemic, showDraw }) => {\n    if(!cards || cards.length <= 0) {\n        return (<></>);\n    }\n\n    return (\n        <div className='infection-deck-section'>\n            <h3 className='infection-deck-section-title'>{name}</h3>\n            {cards.map((card, i) => (\n                <Card\n                    key={i}\n                    card={card}\n                    infect={infect}\n                    epidemic={epidemic}\n                    remove={remove}\n                    unremove={unremove}\n                    showEpidemic={showEpidemic}\n                    showDraw={showDraw}\n                />\n            ))}\n        </div>\n    )\n};\n\n","import React, { useState } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { games } from './index';\n\nexport const Initialize = () => {\n    const [selectedGame, setSelectedGame] = useState(0);\n    const GameConfig = games[selectedGame].Config;\n\n    return (\n        <Container fluid className='main-content'>\n            <h3>Start a New Game</h3>\n            <Form>\n                <Form.Group controlId='init.game-name'>\n                    <Form.Label>Game Version</Form.Label>\n                    <Form.Control as='select' value={selectedGame} onChange={(e) => setSelectedGame(e.target.value)}>\n                        {\n                            games.map((game, i) => (<option key={i} value={i}>{game.name}</option>))\n                        }\n                    </Form.Control>\n                </Form.Group>\n                <GameConfig id={selectedGame} />\n            </Form>\n        </Container>\n    );\n};\n","import React, { useState } from 'react';\nimport { Infections } from './tab/infection';\nimport { Button, Form, Nav } from 'react-bootstrap';\nimport { useAppState } from './state';\nimport './app.css';\nimport { Initialize } from './config/init';\nimport { Trash, SkipBackward } from 'react-bootstrap-icons';\n\n\nexport const App = () => {\n    const [navigation, setNavigation] = useState('/infection');\n    const [game] = useAppState('game');\n    const [, setState] = useAppState();\n\n    if(!game && game !== 0) {\n        return (<Initialize />)\n    }\n\n    return (\n        <>\n            <Nav variant=\"tabs\" activeKey={navigation} onSelect={k => setNavigation(k)}>\n                <Nav.Item className='mr-auto'>\n                    <Nav.Link eventKey='/infection'>Infection Deck</Nav.Link>\n                </Nav.Item>\n                {/*<Nav.Item className='mr-auto'>*/}\n                {/*    <Nav.Link eventKey='/player-cards'>Player Cards</Nav.Link>*/}\n                {/*</Nav.Item>*/}\n                <Form inline className='nav-buttons'>\n                    <Button variant=\"outline-primary\" onClick={() => window.history.back()}><SkipBackward size={24} /></Button>\n                    <Button variant=\"outline-danger\" onClick={() => setState({})}><Trash size={24} /></Button>\n                </Form>\n            </Nav>\n            {navigation === '/infection' && <Infections />}\n            {navigation === '/player-cards' && <div>todo</div>}\n        </>\n    );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { App } from './app';\nimport { AppStateProvider } from './state';\n\nconst Main = () => (\n    <AppStateProvider>\n        <App />\n    </AppStateProvider>\n);\n\nReactDOM.render(<Main />, document.getElementById('root'));\n"],"sourceRoot":""}